// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QDDEntry.proto

#ifndef PROTOBUF_INCLUDED_QDDEntry_2eproto
#define PROTOBUF_INCLUDED_QDDEntry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_QDDEntry_2eproto 

namespace protobuf_QDDEntry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_QDDEntry_2eproto
namespace com {
namespace woqutech {
namespace qdecoder {
namespace entry {
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class RowChange;
class RowChangeDefaultTypeInternal;
extern RowChangeDefaultTypeInternal _RowChange_default_instance_;
class RowData;
class RowDataDefaultTypeInternal;
extern RowDataDefaultTypeInternal _RowData_default_instance_;
class TransactionBegin;
class TransactionBeginDefaultTypeInternal;
extern TransactionBeginDefaultTypeInternal _TransactionBegin_default_instance_;
class TransactionEnd;
class TransactionEndDefaultTypeInternal;
extern TransactionEndDefaultTypeInternal _TransactionEnd_default_instance_;
}  // namespace entry
}  // namespace qdecoder
}  // namespace woqutech
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::woqutech::qdecoder::entry::Column* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::Column>(Arena*);
template<> ::com::woqutech::qdecoder::entry::Entry* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::Entry>(Arena*);
template<> ::com::woqutech::qdecoder::entry::Header* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::Header>(Arena*);
template<> ::com::woqutech::qdecoder::entry::Pair* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::Pair>(Arena*);
template<> ::com::woqutech::qdecoder::entry::RowChange* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::RowChange>(Arena*);
template<> ::com::woqutech::qdecoder::entry::RowData* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::RowData>(Arena*);
template<> ::com::woqutech::qdecoder::entry::TransactionBegin* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::TransactionBegin>(Arena*);
template<> ::com::woqutech::qdecoder::entry::TransactionEnd* Arena::CreateMaybeMessage<::com::woqutech::qdecoder::entry::TransactionEnd>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace woqutech {
namespace qdecoder {
namespace entry {

enum EntryType {
  ENTRYTYPECOMPATIBLEPROTO2 = 0,
  TRANSACTIONBEGIN = 1,
  ROWDATA = 2,
  TRANSACTIONEND = 3,
  HEARTBEAT = 4,
  GTIDLOG = 5,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntryType_IsValid(int value);
const EntryType EntryType_MIN = ENTRYTYPECOMPATIBLEPROTO2;
const EntryType EntryType_MAX = GTIDLOG;
const int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntryType_descriptor();
inline const ::std::string& EntryType_Name(EntryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntryType_descriptor(), value);
}
inline bool EntryType_Parse(
    const ::std::string& name, EntryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum EventType {
  EVENTTYPECOMPATIBLEPROTO2 = 0,
  INSERT = 1,
  UPDATE = 2,
  DELETE = 3,
  CREATE = 4,
  ALTER = 5,
  ERASE = 6,
  QUERY = 7,
  TRUNCATE = 8,
  RENAME = 9,
  CINDEX = 10,
  DINDEX = 11,
  GTID = 12,
  XACOMMIT = 13,
  XAROLLBACK = 14,
  MHEARTBEAT = 15,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = EVENTTYPECOMPATIBLEPROTO2;
const EventType EventType_MAX = MHEARTBEAT;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
enum Type {
  TYPECOMPATIBLEPROTO2 = 0,
  ORACLE = 1,
  MYSQL = 2,
  PGSQL = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = TYPECOMPATIBLEPROTO2;
const Type Type_MAX = PGSQL;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  enum EntryTypePresentCase {
    kEntryType = 2,
    ENTRYTYPE_PRESENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(NULL);
  }

  Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes storeValue = 3;
  void clear_storevalue();
  static const int kStoreValueFieldNumber = 3;
  const ::std::string& storevalue() const;
  void set_storevalue(const ::std::string& value);
  #if LANG_CXX11
  void set_storevalue(::std::string&& value);
  #endif
  void set_storevalue(const char* value);
  void set_storevalue(const void* value, size_t size);
  ::std::string* mutable_storevalue();
  ::std::string* release_storevalue();
  void set_allocated_storevalue(::std::string* storevalue);

  // .com.woqutech.qdecoder.entry.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::com::woqutech::qdecoder::entry::Header& _internal_header() const;
  public:
  const ::com::woqutech::qdecoder::entry::Header& header() const;
  ::com::woqutech::qdecoder::entry::Header* release_header();
  ::com::woqutech::qdecoder::entry::Header* mutable_header();
  void set_allocated_header(::com::woqutech::qdecoder::entry::Header* header);

  // .com.woqutech.qdecoder.entry.EntryType entryType = 2;
  private:
  bool has_entrytype() const;
  public:
  void clear_entrytype();
  static const int kEntryTypeFieldNumber = 2;
  ::com::woqutech::qdecoder::entry::EntryType entrytype() const;
  void set_entrytype(::com::woqutech::qdecoder::entry::EntryType value);

  void clear_entryType_present();
  EntryTypePresentCase entryType_present_case() const;
  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.Entry)
 private:
  void set_has_entrytype();

  inline bool has_entryType_present() const;
  inline void clear_has_entryType_present();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storevalue_;
  ::com::woqutech::qdecoder::entry::Header* header_;
  union EntryTypePresentUnion {
    EntryTypePresentUnion() {}
    int entrytype_;
  } entryType_present_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  enum VersionPresentCase {
    kVersion = 1,
    VERSION_PRESENT_NOT_SET = 0,
  };

  enum SourceTypePresentCase {
    kSourceType = 7,
    SOURCETYPE_PRESENT_NOT_SET = 0,
  };

  enum EventTypePresentCase {
    kEventType = 11,
    EVENTTYPE_PRESENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.Pair props = 12;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 12;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // string logfileName = 2;
  void clear_logfilename();
  static const int kLogfileNameFieldNumber = 2;
  const ::std::string& logfilename() const;
  void set_logfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_logfilename(::std::string&& value);
  #endif
  void set_logfilename(const char* value);
  void set_logfilename(const char* value, size_t size);
  ::std::string* mutable_logfilename();
  ::std::string* release_logfilename();
  void set_allocated_logfilename(::std::string* logfilename);

  // string serverenCode = 5;
  void clear_serverencode();
  static const int kServerenCodeFieldNumber = 5;
  const ::std::string& serverencode() const;
  void set_serverencode(const ::std::string& value);
  #if LANG_CXX11
  void set_serverencode(::std::string&& value);
  #endif
  void set_serverencode(const char* value);
  void set_serverencode(const char* value, size_t size);
  ::std::string* mutable_serverencode();
  ::std::string* release_serverencode();
  void set_allocated_serverencode(::std::string* serverencode);

  // string schemaName = 8;
  void clear_schemaname();
  static const int kSchemaNameFieldNumber = 8;
  const ::std::string& schemaname() const;
  void set_schemaname(const ::std::string& value);
  #if LANG_CXX11
  void set_schemaname(::std::string&& value);
  #endif
  void set_schemaname(const char* value);
  void set_schemaname(const char* value, size_t size);
  ::std::string* mutable_schemaname();
  ::std::string* release_schemaname();
  void set_allocated_schemaname(::std::string* schemaname);

  // string tableName = 9;
  void clear_tablename();
  static const int kTableNameFieldNumber = 9;
  const ::std::string& tablename() const;
  void set_tablename(const ::std::string& value);
  #if LANG_CXX11
  void set_tablename(::std::string&& value);
  #endif
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  ::std::string* mutable_tablename();
  ::std::string* release_tablename();
  void set_allocated_tablename(::std::string* tablename);

  // string gtid = 13;
  void clear_gtid();
  static const int kGtidFieldNumber = 13;
  const ::std::string& gtid() const;
  void set_gtid(const ::std::string& value);
  #if LANG_CXX11
  void set_gtid(::std::string&& value);
  #endif
  void set_gtid(const char* value);
  void set_gtid(const char* value, size_t size);
  ::std::string* mutable_gtid();
  ::std::string* release_gtid();
  void set_allocated_gtid(::std::string* gtid);

  // int64 logfileOffset = 3;
  void clear_logfileoffset();
  static const int kLogfileOffsetFieldNumber = 3;
  ::google::protobuf::int64 logfileoffset() const;
  void set_logfileoffset(::google::protobuf::int64 value);

  // int64 serverId = 4;
  void clear_serverid();
  static const int kServerIdFieldNumber = 4;
  ::google::protobuf::int64 serverid() const;
  void set_serverid(::google::protobuf::int64 value);

  // int64 executeTime = 6;
  void clear_executetime();
  static const int kExecuteTimeFieldNumber = 6;
  ::google::protobuf::int64 executetime() const;
  void set_executetime(::google::protobuf::int64 value);

  // int64 eventLength = 10;
  void clear_eventlength();
  static const int kEventLengthFieldNumber = 10;
  ::google::protobuf::int64 eventlength() const;
  void set_eventlength(::google::protobuf::int64 value);

  // int32 version = 1;
  private:
  bool has_version() const;
  public:
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // .com.woqutech.qdecoder.entry.Type sourceType = 7;
  private:
  bool has_sourcetype() const;
  public:
  void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 7;
  ::com::woqutech::qdecoder::entry::Type sourcetype() const;
  void set_sourcetype(::com::woqutech::qdecoder::entry::Type value);

  // .com.woqutech.qdecoder.entry.EventType eventType = 11;
  private:
  bool has_eventtype() const;
  public:
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 11;
  ::com::woqutech::qdecoder::entry::EventType eventtype() const;
  void set_eventtype(::com::woqutech::qdecoder::entry::EventType value);

  void clear_version_present();
  VersionPresentCase version_present_case() const;
  void clear_sourceType_present();
  SourceTypePresentCase sourceType_present_case() const;
  void clear_eventType_present();
  EventTypePresentCase eventType_present_case() const;
  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.Header)
 private:
  void set_has_version();
  void set_has_sourcetype();
  void set_has_eventtype();

  inline bool has_version_present() const;
  inline void clear_has_version_present();

  inline bool has_sourceType_present() const;
  inline void clear_has_sourceType_present();

  inline bool has_eventType_present() const;
  inline void clear_has_eventType_present();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  ::google::protobuf::internal::ArenaStringPtr logfilename_;
  ::google::protobuf::internal::ArenaStringPtr serverencode_;
  ::google::protobuf::internal::ArenaStringPtr schemaname_;
  ::google::protobuf::internal::ArenaStringPtr tablename_;
  ::google::protobuf::internal::ArenaStringPtr gtid_;
  ::google::protobuf::int64 logfileoffset_;
  ::google::protobuf::int64 serverid_;
  ::google::protobuf::int64 executetime_;
  ::google::protobuf::int64 eventlength_;
  union VersionPresentUnion {
    VersionPresentUnion() {}
    ::google::protobuf::int32 version_;
  } version_present_;
  union SourceTypePresentUnion {
    SourceTypePresentUnion() {}
    int sourcetype_;
  } sourceType_present_;
  union EventTypePresentUnion {
    EventTypePresentUnion() {}
    int eventtype_;
  } eventType_present_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[3];

  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Column : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Column& default_instance();

  enum IsNullPresentCase {
    kIsNull = 6,
    ISNULL_PRESENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Column* other);
  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const final {
    return CreateMaybeMessage<Column>(NULL);
  }

  Column* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.Pair props = 7;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 7;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 8;
  void clear_value();
  static const int kValueFieldNumber = 8;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string mysqlType = 10;
  void clear_mysqltype();
  static const int kMysqlTypeFieldNumber = 10;
  const ::std::string& mysqltype() const;
  void set_mysqltype(const ::std::string& value);
  #if LANG_CXX11
  void set_mysqltype(::std::string&& value);
  #endif
  void set_mysqltype(const char* value);
  void set_mysqltype(const char* value, size_t size);
  ::std::string* mutable_mysqltype();
  ::std::string* release_mysqltype();
  void set_allocated_mysqltype(::std::string* mysqltype);

  // int32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 sqlType = 2;
  void clear_sqltype();
  static const int kSqlTypeFieldNumber = 2;
  ::google::protobuf::int32 sqltype() const;
  void set_sqltype(::google::protobuf::int32 value);

  // bool isKey = 4;
  void clear_iskey();
  static const int kIsKeyFieldNumber = 4;
  bool iskey() const;
  void set_iskey(bool value);

  // bool updated = 5;
  void clear_updated();
  static const int kUpdatedFieldNumber = 5;
  bool updated() const;
  void set_updated(bool value);

  // int32 length = 9;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // bool isNull = 6;
  private:
  bool has_isnull() const;
  public:
  void clear_isnull();
  static const int kIsNullFieldNumber = 6;
  bool isnull() const;
  void set_isnull(bool value);

  void clear_isNull_present();
  IsNullPresentCase isNull_present_case() const;
  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.Column)
 private:
  void set_has_isnull();

  inline bool has_isNull_present() const;
  inline void clear_has_isNull_present();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr mysqltype_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 sqltype_;
  bool iskey_;
  bool updated_;
  ::google::protobuf::int32 length_;
  union IsNullPresentUnion {
    IsNullPresentUnion() {}
    bool isnull_;
  } isNull_present_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.RowData) */ {
 public:
  RowData();
  virtual ~RowData();

  RowData(const RowData& from);

  inline RowData& operator=(const RowData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowData(RowData&& from) noexcept
    : RowData() {
    *this = ::std::move(from);
  }

  inline RowData& operator=(RowData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RowData* internal_default_instance() {
    return reinterpret_cast<const RowData*>(
               &_RowData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RowData* other);
  friend void swap(RowData& a, RowData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowData* New() const final {
    return CreateMaybeMessage<RowData>(NULL);
  }

  RowData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RowData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RowData& from);
  void MergeFrom(const RowData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.Column beforeColumns = 1;
  int beforecolumns_size() const;
  void clear_beforecolumns();
  static const int kBeforeColumnsFieldNumber = 1;
  ::com::woqutech::qdecoder::entry::Column* mutable_beforecolumns(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >*
      mutable_beforecolumns();
  const ::com::woqutech::qdecoder::entry::Column& beforecolumns(int index) const;
  ::com::woqutech::qdecoder::entry::Column* add_beforecolumns();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >&
      beforecolumns() const;

  // repeated .com.woqutech.qdecoder.entry.Column afterColumns = 2;
  int aftercolumns_size() const;
  void clear_aftercolumns();
  static const int kAfterColumnsFieldNumber = 2;
  ::com::woqutech::qdecoder::entry::Column* mutable_aftercolumns(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >*
      mutable_aftercolumns();
  const ::com::woqutech::qdecoder::entry::Column& aftercolumns(int index) const;
  ::com::woqutech::qdecoder::entry::Column* add_aftercolumns();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >&
      aftercolumns() const;

  // repeated .com.woqutech.qdecoder.entry.Pair props = 3;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 3;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.RowData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column > beforecolumns_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column > aftercolumns_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RowChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.RowChange) */ {
 public:
  RowChange();
  virtual ~RowChange();

  RowChange(const RowChange& from);

  inline RowChange& operator=(const RowChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowChange(RowChange&& from) noexcept
    : RowChange() {
    *this = ::std::move(from);
  }

  inline RowChange& operator=(RowChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RowChange& default_instance();

  enum EventTypePresentCase {
    kEventType = 2,
    EVENTTYPE_PRESENT_NOT_SET = 0,
  };

  enum IsDdlPresentCase {
    kIsDdl = 10,
    ISDDL_PRESENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RowChange* internal_default_instance() {
    return reinterpret_cast<const RowChange*>(
               &_RowChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RowChange* other);
  friend void swap(RowChange& a, RowChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowChange* New() const final {
    return CreateMaybeMessage<RowChange>(NULL);
  }

  RowChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RowChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RowChange& from);
  void MergeFrom(const RowChange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.RowData rowDatas = 12;
  int rowdatas_size() const;
  void clear_rowdatas();
  static const int kRowDatasFieldNumber = 12;
  ::com::woqutech::qdecoder::entry::RowData* mutable_rowdatas(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::RowData >*
      mutable_rowdatas();
  const ::com::woqutech::qdecoder::entry::RowData& rowdatas(int index) const;
  ::com::woqutech::qdecoder::entry::RowData* add_rowdatas();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::RowData >&
      rowdatas() const;

  // repeated .com.woqutech.qdecoder.entry.Pair props = 13;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 13;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // string sql = 11;
  void clear_sql();
  static const int kSqlFieldNumber = 11;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // string ddlSchemaName = 14;
  void clear_ddlschemaname();
  static const int kDdlSchemaNameFieldNumber = 14;
  const ::std::string& ddlschemaname() const;
  void set_ddlschemaname(const ::std::string& value);
  #if LANG_CXX11
  void set_ddlschemaname(::std::string&& value);
  #endif
  void set_ddlschemaname(const char* value);
  void set_ddlschemaname(const char* value, size_t size);
  ::std::string* mutable_ddlschemaname();
  ::std::string* release_ddlschemaname();
  void set_allocated_ddlschemaname(::std::string* ddlschemaname);

  // int64 tableId = 1;
  void clear_tableid();
  static const int kTableIdFieldNumber = 1;
  ::google::protobuf::int64 tableid() const;
  void set_tableid(::google::protobuf::int64 value);

  // .com.woqutech.qdecoder.entry.EventType eventType = 2;
  private:
  bool has_eventtype() const;
  public:
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::com::woqutech::qdecoder::entry::EventType eventtype() const;
  void set_eventtype(::com::woqutech::qdecoder::entry::EventType value);

  // bool isDdl = 10;
  private:
  bool has_isddl() const;
  public:
  void clear_isddl();
  static const int kIsDdlFieldNumber = 10;
  bool isddl() const;
  void set_isddl(bool value);

  void clear_eventType_present();
  EventTypePresentCase eventType_present_case() const;
  void clear_isDdl_present();
  IsDdlPresentCase isDdl_present_case() const;
  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.RowChange)
 private:
  void set_has_eventtype();
  void set_has_isddl();

  inline bool has_eventType_present() const;
  inline void clear_has_eventType_present();

  inline bool has_isDdl_present() const;
  inline void clear_has_isDdl_present();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::RowData > rowdatas_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr ddlschemaname_;
  ::google::protobuf::int64 tableid_;
  union EventTypePresentUnion {
    EventTypePresentUnion() {}
    int eventtype_;
  } eventType_present_;
  union IsDdlPresentUnion {
    IsDdlPresentUnion() {}
    bool isddl_;
  } isDdl_present_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionBegin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.TransactionBegin) */ {
 public:
  TransactionBegin();
  virtual ~TransactionBegin();

  TransactionBegin(const TransactionBegin& from);

  inline TransactionBegin& operator=(const TransactionBegin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionBegin(TransactionBegin&& from) noexcept
    : TransactionBegin() {
    *this = ::std::move(from);
  }

  inline TransactionBegin& operator=(TransactionBegin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionBegin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionBegin* internal_default_instance() {
    return reinterpret_cast<const TransactionBegin*>(
               &_TransactionBegin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TransactionBegin* other);
  friend void swap(TransactionBegin& a, TransactionBegin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionBegin* New() const final {
    return CreateMaybeMessage<TransactionBegin>(NULL);
  }

  TransactionBegin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransactionBegin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransactionBegin& from);
  void MergeFrom(const TransactionBegin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBegin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.Pair props = 3;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 3;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // string transactionId = 2;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  const ::std::string& transactionid() const;
  void set_transactionid(const ::std::string& value);
  #if LANG_CXX11
  void set_transactionid(::std::string&& value);
  #endif
  void set_transactionid(const char* value);
  void set_transactionid(const char* value, size_t size);
  ::std::string* mutable_transactionid();
  ::std::string* release_transactionid();
  void set_allocated_transactionid(::std::string* transactionid);

  // int64 executeTime = 1;
  void clear_executetime();
  static const int kExecuteTimeFieldNumber = 1;
  ::google::protobuf::int64 executetime() const;
  void set_executetime(::google::protobuf::int64 value);

  // int64 threadId = 4;
  void clear_threadid();
  static const int kThreadIdFieldNumber = 4;
  ::google::protobuf::int64 threadid() const;
  void set_threadid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.TransactionBegin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  ::google::protobuf::internal::ArenaStringPtr transactionid_;
  ::google::protobuf::int64 executetime_;
  ::google::protobuf::int64 threadid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.TransactionEnd) */ {
 public:
  TransactionEnd();
  virtual ~TransactionEnd();

  TransactionEnd(const TransactionEnd& from);

  inline TransactionEnd& operator=(const TransactionEnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionEnd(TransactionEnd&& from) noexcept
    : TransactionEnd() {
    *this = ::std::move(from);
  }

  inline TransactionEnd& operator=(TransactionEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionEnd* internal_default_instance() {
    return reinterpret_cast<const TransactionEnd*>(
               &_TransactionEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TransactionEnd* other);
  friend void swap(TransactionEnd& a, TransactionEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionEnd* New() const final {
    return CreateMaybeMessage<TransactionEnd>(NULL);
  }

  TransactionEnd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransactionEnd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransactionEnd& from);
  void MergeFrom(const TransactionEnd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.woqutech.qdecoder.entry.Pair props = 3;
  int props_size() const;
  void clear_props();
  static const int kPropsFieldNumber = 3;
  ::com::woqutech::qdecoder::entry::Pair* mutable_props(int index);
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
      mutable_props();
  const ::com::woqutech::qdecoder::entry::Pair& props(int index) const;
  ::com::woqutech::qdecoder::entry::Pair* add_props();
  const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
      props() const;

  // string transactionId = 2;
  void clear_transactionid();
  static const int kTransactionIdFieldNumber = 2;
  const ::std::string& transactionid() const;
  void set_transactionid(const ::std::string& value);
  #if LANG_CXX11
  void set_transactionid(::std::string&& value);
  #endif
  void set_transactionid(const char* value);
  void set_transactionid(const char* value, size_t size);
  ::std::string* mutable_transactionid();
  ::std::string* release_transactionid();
  void set_allocated_transactionid(::std::string* transactionid);

  // int64 executeTime = 1;
  void clear_executetime();
  static const int kExecuteTimeFieldNumber = 1;
  ::google::protobuf::int64 executetime() const;
  void set_executetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.TransactionEnd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair > props_;
  ::google::protobuf::internal::ArenaStringPtr transactionid_;
  ::google::protobuf::int64 executetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.woqutech.qdecoder.entry.Pair) */ {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Pair* other);
  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const final {
    return CreateMaybeMessage<Pair>(NULL);
  }

  Pair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.woqutech.qdecoder.entry.Pair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_QDDEntry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// .com.woqutech.qdecoder.entry.Header header = 1;
inline bool Entry::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Entry::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::com::woqutech::qdecoder::entry::Header& Entry::_internal_header() const {
  return *header_;
}
inline const ::com::woqutech::qdecoder::entry::Header& Entry::header() const {
  const ::com::woqutech::qdecoder::entry::Header* p = header_;
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Entry.header)
  return p != NULL ? *p : *reinterpret_cast<const ::com::woqutech::qdecoder::entry::Header*>(
      &::com::woqutech::qdecoder::entry::_Header_default_instance_);
}
inline ::com::woqutech::qdecoder::entry::Header* Entry::release_header() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Entry.header)
  
  ::com::woqutech::qdecoder::entry::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::com::woqutech::qdecoder::entry::Header* Entry::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::com::woqutech::qdecoder::entry::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Entry.header)
  return header_;
}
inline void Entry::set_allocated_header(::com::woqutech::qdecoder::entry::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Entry.header)
}

// .com.woqutech.qdecoder.entry.EntryType entryType = 2;
inline bool Entry::has_entrytype() const {
  return entryType_present_case() == kEntryType;
}
inline void Entry::set_has_entrytype() {
  _oneof_case_[0] = kEntryType;
}
inline void Entry::clear_entrytype() {
  if (has_entrytype()) {
    entryType_present_.entrytype_ = 0;
    clear_has_entryType_present();
  }
}
inline ::com::woqutech::qdecoder::entry::EntryType Entry::entrytype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Entry.entryType)
  if (has_entrytype()) {
    return static_cast< ::com::woqutech::qdecoder::entry::EntryType >(entryType_present_.entrytype_);
  }
  return static_cast< ::com::woqutech::qdecoder::entry::EntryType >(0);
}
inline void Entry::set_entrytype(::com::woqutech::qdecoder::entry::EntryType value) {
  if (!has_entrytype()) {
    clear_entryType_present();
    set_has_entrytype();
  }
  entryType_present_.entrytype_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Entry.entryType)
}

// bytes storeValue = 3;
inline void Entry::clear_storevalue() {
  storevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::storevalue() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Entry.storeValue)
  return storevalue_.GetNoArena();
}
inline void Entry::set_storevalue(const ::std::string& value) {
  
  storevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Entry.storeValue)
}
#if LANG_CXX11
inline void Entry::set_storevalue(::std::string&& value) {
  
  storevalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Entry.storeValue)
}
#endif
inline void Entry::set_storevalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Entry.storeValue)
}
inline void Entry::set_storevalue(const void* value, size_t size) {
  
  storevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Entry.storeValue)
}
inline ::std::string* Entry::mutable_storevalue() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Entry.storeValue)
  return storevalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_storevalue() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Entry.storeValue)
  
  return storevalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_storevalue(::std::string* storevalue) {
  if (storevalue != NULL) {
    
  } else {
    
  }
  storevalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storevalue);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Entry.storeValue)
}

inline bool Entry::has_entryType_present() const {
  return entryType_present_case() != ENTRYTYPE_PRESENT_NOT_SET;
}
inline void Entry::clear_has_entryType_present() {
  _oneof_case_[0] = ENTRYTYPE_PRESENT_NOT_SET;
}
inline Entry::EntryTypePresentCase Entry::entryType_present_case() const {
  return Entry::EntryTypePresentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Header

// int32 version = 1;
inline bool Header::has_version() const {
  return version_present_case() == kVersion;
}
inline void Header::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline void Header::clear_version() {
  if (has_version()) {
    version_present_.version_ = 0;
    clear_has_version_present();
  }
}
inline ::google::protobuf::int32 Header::version() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.version)
  if (has_version()) {
    return version_present_.version_;
  }
  return 0;
}
inline void Header::set_version(::google::protobuf::int32 value) {
  if (!has_version()) {
    clear_version_present();
    set_has_version();
  }
  version_present_.version_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.version)
}

// string logfileName = 2;
inline void Header::clear_logfilename() {
  logfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::logfilename() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.logfileName)
  return logfilename_.GetNoArena();
}
inline void Header::set_logfilename(const ::std::string& value) {
  
  logfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.logfileName)
}
#if LANG_CXX11
inline void Header::set_logfilename(::std::string&& value) {
  
  logfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Header.logfileName)
}
#endif
inline void Header::set_logfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Header.logfileName)
}
inline void Header::set_logfilename(const char* value, size_t size) {
  
  logfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Header.logfileName)
}
inline ::std::string* Header::mutable_logfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.logfileName)
  return logfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_logfilename() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Header.logfileName)
  
  return logfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_logfilename(::std::string* logfilename) {
  if (logfilename != NULL) {
    
  } else {
    
  }
  logfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logfilename);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Header.logfileName)
}

// int64 logfileOffset = 3;
inline void Header::clear_logfileoffset() {
  logfileoffset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::logfileoffset() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.logfileOffset)
  return logfileoffset_;
}
inline void Header::set_logfileoffset(::google::protobuf::int64 value) {
  
  logfileoffset_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.logfileOffset)
}

// int64 serverId = 4;
inline void Header::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::serverid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.serverId)
  return serverid_;
}
inline void Header::set_serverid(::google::protobuf::int64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.serverId)
}

// string serverenCode = 5;
inline void Header::clear_serverencode() {
  serverencode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::serverencode() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.serverenCode)
  return serverencode_.GetNoArena();
}
inline void Header::set_serverencode(const ::std::string& value) {
  
  serverencode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.serverenCode)
}
#if LANG_CXX11
inline void Header::set_serverencode(::std::string&& value) {
  
  serverencode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Header.serverenCode)
}
#endif
inline void Header::set_serverencode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverencode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Header.serverenCode)
}
inline void Header::set_serverencode(const char* value, size_t size) {
  
  serverencode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Header.serverenCode)
}
inline ::std::string* Header::mutable_serverencode() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.serverenCode)
  return serverencode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_serverencode() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Header.serverenCode)
  
  return serverencode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_serverencode(::std::string* serverencode) {
  if (serverencode != NULL) {
    
  } else {
    
  }
  serverencode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverencode);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Header.serverenCode)
}

// int64 executeTime = 6;
inline void Header::clear_executetime() {
  executetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::executetime() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.executeTime)
  return executetime_;
}
inline void Header::set_executetime(::google::protobuf::int64 value) {
  
  executetime_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.executeTime)
}

// .com.woqutech.qdecoder.entry.Type sourceType = 7;
inline bool Header::has_sourcetype() const {
  return sourceType_present_case() == kSourceType;
}
inline void Header::set_has_sourcetype() {
  _oneof_case_[1] = kSourceType;
}
inline void Header::clear_sourcetype() {
  if (has_sourcetype()) {
    sourceType_present_.sourcetype_ = 0;
    clear_has_sourceType_present();
  }
}
inline ::com::woqutech::qdecoder::entry::Type Header::sourcetype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.sourceType)
  if (has_sourcetype()) {
    return static_cast< ::com::woqutech::qdecoder::entry::Type >(sourceType_present_.sourcetype_);
  }
  return static_cast< ::com::woqutech::qdecoder::entry::Type >(0);
}
inline void Header::set_sourcetype(::com::woqutech::qdecoder::entry::Type value) {
  if (!has_sourcetype()) {
    clear_sourceType_present();
    set_has_sourcetype();
  }
  sourceType_present_.sourcetype_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.sourceType)
}

// string schemaName = 8;
inline void Header::clear_schemaname() {
  schemaname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::schemaname() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.schemaName)
  return schemaname_.GetNoArena();
}
inline void Header::set_schemaname(const ::std::string& value) {
  
  schemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.schemaName)
}
#if LANG_CXX11
inline void Header::set_schemaname(::std::string&& value) {
  
  schemaname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Header.schemaName)
}
#endif
inline void Header::set_schemaname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Header.schemaName)
}
inline void Header::set_schemaname(const char* value, size_t size) {
  
  schemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Header.schemaName)
}
inline ::std::string* Header::mutable_schemaname() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.schemaName)
  return schemaname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_schemaname() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Header.schemaName)
  
  return schemaname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_schemaname(::std::string* schemaname) {
  if (schemaname != NULL) {
    
  } else {
    
  }
  schemaname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schemaname);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Header.schemaName)
}

// string tableName = 9;
inline void Header::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::tablename() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.tableName)
  return tablename_.GetNoArena();
}
inline void Header::set_tablename(const ::std::string& value) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.tableName)
}
#if LANG_CXX11
inline void Header::set_tablename(::std::string&& value) {
  
  tablename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Header.tableName)
}
#endif
inline void Header::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Header.tableName)
}
inline void Header::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Header.tableName)
}
inline ::std::string* Header::mutable_tablename() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.tableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_tablename() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Header.tableName)
  
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Header.tableName)
}

// int64 eventLength = 10;
inline void Header::clear_eventlength() {
  eventlength_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::eventlength() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.eventLength)
  return eventlength_;
}
inline void Header::set_eventlength(::google::protobuf::int64 value) {
  
  eventlength_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.eventLength)
}

// .com.woqutech.qdecoder.entry.EventType eventType = 11;
inline bool Header::has_eventtype() const {
  return eventType_present_case() == kEventType;
}
inline void Header::set_has_eventtype() {
  _oneof_case_[2] = kEventType;
}
inline void Header::clear_eventtype() {
  if (has_eventtype()) {
    eventType_present_.eventtype_ = 0;
    clear_has_eventType_present();
  }
}
inline ::com::woqutech::qdecoder::entry::EventType Header::eventtype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.eventType)
  if (has_eventtype()) {
    return static_cast< ::com::woqutech::qdecoder::entry::EventType >(eventType_present_.eventtype_);
  }
  return static_cast< ::com::woqutech::qdecoder::entry::EventType >(0);
}
inline void Header::set_eventtype(::com::woqutech::qdecoder::entry::EventType value) {
  if (!has_eventtype()) {
    clear_eventType_present();
    set_has_eventtype();
  }
  eventType_present_.eventtype_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.eventType)
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 12;
inline int Header::props_size() const {
  return props_.size();
}
inline void Header::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* Header::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
Header::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.Header.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& Header::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* Header::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.Header.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
Header::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.Header.props)
  return props_;
}

// string gtid = 13;
inline void Header::clear_gtid() {
  gtid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::gtid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Header.gtid)
  return gtid_.GetNoArena();
}
inline void Header::set_gtid(const ::std::string& value) {
  
  gtid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Header.gtid)
}
#if LANG_CXX11
inline void Header::set_gtid(::std::string&& value) {
  
  gtid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Header.gtid)
}
#endif
inline void Header::set_gtid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gtid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Header.gtid)
}
inline void Header::set_gtid(const char* value, size_t size) {
  
  gtid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Header.gtid)
}
inline ::std::string* Header::mutable_gtid() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Header.gtid)
  return gtid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_gtid() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Header.gtid)
  
  return gtid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_gtid(::std::string* gtid) {
  if (gtid != NULL) {
    
  } else {
    
  }
  gtid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gtid);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Header.gtid)
}

inline bool Header::has_version_present() const {
  return version_present_case() != VERSION_PRESENT_NOT_SET;
}
inline void Header::clear_has_version_present() {
  _oneof_case_[0] = VERSION_PRESENT_NOT_SET;
}
inline bool Header::has_sourceType_present() const {
  return sourceType_present_case() != SOURCETYPE_PRESENT_NOT_SET;
}
inline void Header::clear_has_sourceType_present() {
  _oneof_case_[1] = SOURCETYPE_PRESENT_NOT_SET;
}
inline bool Header::has_eventType_present() const {
  return eventType_present_case() != EVENTTYPE_PRESENT_NOT_SET;
}
inline void Header::clear_has_eventType_present() {
  _oneof_case_[2] = EVENTTYPE_PRESENT_NOT_SET;
}
inline Header::VersionPresentCase Header::version_present_case() const {
  return Header::VersionPresentCase(_oneof_case_[0]);
}
inline Header::SourceTypePresentCase Header::sourceType_present_case() const {
  return Header::SourceTypePresentCase(_oneof_case_[1]);
}
inline Header::EventTypePresentCase Header::eventType_present_case() const {
  return Header::EventTypePresentCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// Column

// int32 index = 1;
inline void Column::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Column::index() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.index)
  return index_;
}
inline void Column::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.index)
}

// int32 sqlType = 2;
inline void Column::clear_sqltype() {
  sqltype_ = 0;
}
inline ::google::protobuf::int32 Column::sqltype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.sqlType)
  return sqltype_;
}
inline void Column::set_sqltype(::google::protobuf::int32 value) {
  
  sqltype_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.sqlType)
}

// string name = 3;
inline void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.name)
  return name_.GetNoArena();
}
inline void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.name)
}
#if LANG_CXX11
inline void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Column.name)
}
#endif
inline void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Column.name)
}
inline void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Column.name)
}
inline ::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Column.name)
}

// bool isKey = 4;
inline void Column::clear_iskey() {
  iskey_ = false;
}
inline bool Column::iskey() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.isKey)
  return iskey_;
}
inline void Column::set_iskey(bool value) {
  
  iskey_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.isKey)
}

// bool updated = 5;
inline void Column::clear_updated() {
  updated_ = false;
}
inline bool Column::updated() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.updated)
  return updated_;
}
inline void Column::set_updated(bool value) {
  
  updated_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.updated)
}

// bool isNull = 6;
inline bool Column::has_isnull() const {
  return isNull_present_case() == kIsNull;
}
inline void Column::set_has_isnull() {
  _oneof_case_[0] = kIsNull;
}
inline void Column::clear_isnull() {
  if (has_isnull()) {
    isNull_present_.isnull_ = false;
    clear_has_isNull_present();
  }
}
inline bool Column::isnull() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.isNull)
  if (has_isnull()) {
    return isNull_present_.isnull_;
  }
  return false;
}
inline void Column::set_isnull(bool value) {
  if (!has_isnull()) {
    clear_isNull_present();
    set_has_isnull();
  }
  isNull_present_.isnull_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.isNull)
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 7;
inline int Column::props_size() const {
  return props_.size();
}
inline void Column::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* Column::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Column.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
Column::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.Column.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& Column::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* Column::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.Column.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
Column::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.Column.props)
  return props_;
}

// string value = 8;
inline void Column::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::value() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.value)
  return value_.GetNoArena();
}
inline void Column::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.value)
}
#if LANG_CXX11
inline void Column::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Column.value)
}
#endif
inline void Column::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Column.value)
}
inline void Column::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Column.value)
}
inline ::std::string* Column::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Column.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_value() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Column.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Column.value)
}

// int32 length = 9;
inline void Column::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 Column::length() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.length)
  return length_;
}
inline void Column::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.length)
}

// string mysqlType = 10;
inline void Column::clear_mysqltype() {
  mysqltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::mysqltype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Column.mysqlType)
  return mysqltype_.GetNoArena();
}
inline void Column::set_mysqltype(const ::std::string& value) {
  
  mysqltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Column.mysqlType)
}
#if LANG_CXX11
inline void Column::set_mysqltype(::std::string&& value) {
  
  mysqltype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Column.mysqlType)
}
#endif
inline void Column::set_mysqltype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mysqltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Column.mysqlType)
}
inline void Column::set_mysqltype(const char* value, size_t size) {
  
  mysqltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Column.mysqlType)
}
inline ::std::string* Column::mutable_mysqltype() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Column.mysqlType)
  return mysqltype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_mysqltype() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Column.mysqlType)
  
  return mysqltype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_mysqltype(::std::string* mysqltype) {
  if (mysqltype != NULL) {
    
  } else {
    
  }
  mysqltype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysqltype);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Column.mysqlType)
}

inline bool Column::has_isNull_present() const {
  return isNull_present_case() != ISNULL_PRESENT_NOT_SET;
}
inline void Column::clear_has_isNull_present() {
  _oneof_case_[0] = ISNULL_PRESENT_NOT_SET;
}
inline Column::IsNullPresentCase Column::isNull_present_case() const {
  return Column::IsNullPresentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RowData

// repeated .com.woqutech.qdecoder.entry.Column beforeColumns = 1;
inline int RowData::beforecolumns_size() const {
  return beforecolumns_.size();
}
inline void RowData::clear_beforecolumns() {
  beforecolumns_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Column* RowData::mutable_beforecolumns(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowData.beforeColumns)
  return beforecolumns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >*
RowData::mutable_beforecolumns() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.RowData.beforeColumns)
  return &beforecolumns_;
}
inline const ::com::woqutech::qdecoder::entry::Column& RowData::beforecolumns(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowData.beforeColumns)
  return beforecolumns_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Column* RowData::add_beforecolumns() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.RowData.beforeColumns)
  return beforecolumns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >&
RowData::beforecolumns() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.RowData.beforeColumns)
  return beforecolumns_;
}

// repeated .com.woqutech.qdecoder.entry.Column afterColumns = 2;
inline int RowData::aftercolumns_size() const {
  return aftercolumns_.size();
}
inline void RowData::clear_aftercolumns() {
  aftercolumns_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Column* RowData::mutable_aftercolumns(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowData.afterColumns)
  return aftercolumns_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >*
RowData::mutable_aftercolumns() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.RowData.afterColumns)
  return &aftercolumns_;
}
inline const ::com::woqutech::qdecoder::entry::Column& RowData::aftercolumns(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowData.afterColumns)
  return aftercolumns_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Column* RowData::add_aftercolumns() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.RowData.afterColumns)
  return aftercolumns_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Column >&
RowData::aftercolumns() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.RowData.afterColumns)
  return aftercolumns_;
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 3;
inline int RowData::props_size() const {
  return props_.size();
}
inline void RowData::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* RowData::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowData.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
RowData::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.RowData.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& RowData::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowData.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* RowData::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.RowData.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
RowData::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.RowData.props)
  return props_;
}

// -------------------------------------------------------------------

// RowChange

// int64 tableId = 1;
inline void RowChange::clear_tableid() {
  tableid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RowChange::tableid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.tableId)
  return tableid_;
}
inline void RowChange::set_tableid(::google::protobuf::int64 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.RowChange.tableId)
}

// .com.woqutech.qdecoder.entry.EventType eventType = 2;
inline bool RowChange::has_eventtype() const {
  return eventType_present_case() == kEventType;
}
inline void RowChange::set_has_eventtype() {
  _oneof_case_[0] = kEventType;
}
inline void RowChange::clear_eventtype() {
  if (has_eventtype()) {
    eventType_present_.eventtype_ = 0;
    clear_has_eventType_present();
  }
}
inline ::com::woqutech::qdecoder::entry::EventType RowChange::eventtype() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.eventType)
  if (has_eventtype()) {
    return static_cast< ::com::woqutech::qdecoder::entry::EventType >(eventType_present_.eventtype_);
  }
  return static_cast< ::com::woqutech::qdecoder::entry::EventType >(0);
}
inline void RowChange::set_eventtype(::com::woqutech::qdecoder::entry::EventType value) {
  if (!has_eventtype()) {
    clear_eventType_present();
    set_has_eventtype();
  }
  eventType_present_.eventtype_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.RowChange.eventType)
}

// bool isDdl = 10;
inline bool RowChange::has_isddl() const {
  return isDdl_present_case() == kIsDdl;
}
inline void RowChange::set_has_isddl() {
  _oneof_case_[1] = kIsDdl;
}
inline void RowChange::clear_isddl() {
  if (has_isddl()) {
    isDdl_present_.isddl_ = false;
    clear_has_isDdl_present();
  }
}
inline bool RowChange::isddl() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.isDdl)
  if (has_isddl()) {
    return isDdl_present_.isddl_;
  }
  return false;
}
inline void RowChange::set_isddl(bool value) {
  if (!has_isddl()) {
    clear_isDdl_present();
    set_has_isddl();
  }
  isDdl_present_.isddl_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.RowChange.isDdl)
}

// string sql = 11;
inline void RowChange::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowChange::sql() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.sql)
  return sql_.GetNoArena();
}
inline void RowChange::set_sql(const ::std::string& value) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.RowChange.sql)
}
#if LANG_CXX11
inline void RowChange::set_sql(::std::string&& value) {
  
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.RowChange.sql)
}
#endif
inline void RowChange::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.RowChange.sql)
}
inline void RowChange::set_sql(const char* value, size_t size) {
  
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.RowChange.sql)
}
inline ::std::string* RowChange::mutable_sql() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowChange.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowChange::release_sql() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.RowChange.sql)
  
  return sql_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowChange::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    
  } else {
    
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.RowChange.sql)
}

// repeated .com.woqutech.qdecoder.entry.RowData rowDatas = 12;
inline int RowChange::rowdatas_size() const {
  return rowdatas_.size();
}
inline void RowChange::clear_rowdatas() {
  rowdatas_.Clear();
}
inline ::com::woqutech::qdecoder::entry::RowData* RowChange::mutable_rowdatas(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowChange.rowDatas)
  return rowdatas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::RowData >*
RowChange::mutable_rowdatas() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.RowChange.rowDatas)
  return &rowdatas_;
}
inline const ::com::woqutech::qdecoder::entry::RowData& RowChange::rowdatas(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.rowDatas)
  return rowdatas_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::RowData* RowChange::add_rowdatas() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.RowChange.rowDatas)
  return rowdatas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::RowData >&
RowChange::rowdatas() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.RowChange.rowDatas)
  return rowdatas_;
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 13;
inline int RowChange::props_size() const {
  return props_.size();
}
inline void RowChange::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* RowChange::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowChange.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
RowChange::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.RowChange.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& RowChange::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* RowChange::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.RowChange.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
RowChange::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.RowChange.props)
  return props_;
}

// string ddlSchemaName = 14;
inline void RowChange::clear_ddlschemaname() {
  ddlschemaname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RowChange::ddlschemaname() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
  return ddlschemaname_.GetNoArena();
}
inline void RowChange::set_ddlschemaname(const ::std::string& value) {
  
  ddlschemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
}
#if LANG_CXX11
inline void RowChange::set_ddlschemaname(::std::string&& value) {
  
  ddlschemaname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
}
#endif
inline void RowChange::set_ddlschemaname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ddlschemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
}
inline void RowChange::set_ddlschemaname(const char* value, size_t size) {
  
  ddlschemaname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
}
inline ::std::string* RowChange::mutable_ddlschemaname() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
  return ddlschemaname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RowChange::release_ddlschemaname() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
  
  return ddlschemaname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RowChange::set_allocated_ddlschemaname(::std::string* ddlschemaname) {
  if (ddlschemaname != NULL) {
    
  } else {
    
  }
  ddlschemaname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ddlschemaname);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.RowChange.ddlSchemaName)
}

inline bool RowChange::has_eventType_present() const {
  return eventType_present_case() != EVENTTYPE_PRESENT_NOT_SET;
}
inline void RowChange::clear_has_eventType_present() {
  _oneof_case_[0] = EVENTTYPE_PRESENT_NOT_SET;
}
inline bool RowChange::has_isDdl_present() const {
  return isDdl_present_case() != ISDDL_PRESENT_NOT_SET;
}
inline void RowChange::clear_has_isDdl_present() {
  _oneof_case_[1] = ISDDL_PRESENT_NOT_SET;
}
inline RowChange::EventTypePresentCase RowChange::eventType_present_case() const {
  return RowChange::EventTypePresentCase(_oneof_case_[0]);
}
inline RowChange::IsDdlPresentCase RowChange::isDdl_present_case() const {
  return RowChange::IsDdlPresentCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TransactionBegin

// int64 executeTime = 1;
inline void TransactionBegin::clear_executetime() {
  executetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransactionBegin::executetime() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionBegin.executeTime)
  return executetime_;
}
inline void TransactionBegin::set_executetime(::google::protobuf::int64 value) {
  
  executetime_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.TransactionBegin.executeTime)
}

// string transactionId = 2;
inline void TransactionBegin::clear_transactionid() {
  transactionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionBegin::transactionid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
  return transactionid_.GetNoArena();
}
inline void TransactionBegin::set_transactionid(const ::std::string& value) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
}
#if LANG_CXX11
inline void TransactionBegin::set_transactionid(::std::string&& value) {
  
  transactionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
}
#endif
inline void TransactionBegin::set_transactionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
}
inline void TransactionBegin::set_transactionid(const char* value, size_t size) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
}
inline ::std::string* TransactionBegin::mutable_transactionid() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
  return transactionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionBegin::release_transactionid() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
  
  return transactionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionBegin::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid != NULL) {
    
  } else {
    
  }
  transactionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transactionid);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.TransactionBegin.transactionId)
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 3;
inline int TransactionBegin::props_size() const {
  return props_.size();
}
inline void TransactionBegin::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* TransactionBegin::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.TransactionBegin.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
TransactionBegin::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.TransactionBegin.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& TransactionBegin::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionBegin.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* TransactionBegin::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.TransactionBegin.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
TransactionBegin::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.TransactionBegin.props)
  return props_;
}

// int64 threadId = 4;
inline void TransactionBegin::clear_threadid() {
  threadid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransactionBegin::threadid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionBegin.threadId)
  return threadid_;
}
inline void TransactionBegin::set_threadid(::google::protobuf::int64 value) {
  
  threadid_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.TransactionBegin.threadId)
}

// -------------------------------------------------------------------

// TransactionEnd

// int64 executeTime = 1;
inline void TransactionEnd::clear_executetime() {
  executetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TransactionEnd::executetime() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionEnd.executeTime)
  return executetime_;
}
inline void TransactionEnd::set_executetime(::google::protobuf::int64 value) {
  
  executetime_ = value;
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.TransactionEnd.executeTime)
}

// string transactionId = 2;
inline void TransactionEnd::clear_transactionid() {
  transactionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionEnd::transactionid() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
  return transactionid_.GetNoArena();
}
inline void TransactionEnd::set_transactionid(const ::std::string& value) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
}
#if LANG_CXX11
inline void TransactionEnd::set_transactionid(::std::string&& value) {
  
  transactionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
}
#endif
inline void TransactionEnd::set_transactionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
}
inline void TransactionEnd::set_transactionid(const char* value, size_t size) {
  
  transactionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
}
inline ::std::string* TransactionEnd::mutable_transactionid() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
  return transactionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionEnd::release_transactionid() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
  
  return transactionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEnd::set_allocated_transactionid(::std::string* transactionid) {
  if (transactionid != NULL) {
    
  } else {
    
  }
  transactionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transactionid);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.TransactionEnd.transactionId)
}

// repeated .com.woqutech.qdecoder.entry.Pair props = 3;
inline int TransactionEnd::props_size() const {
  return props_.size();
}
inline void TransactionEnd::clear_props() {
  props_.Clear();
}
inline ::com::woqutech::qdecoder::entry::Pair* TransactionEnd::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.TransactionEnd.props)
  return props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >*
TransactionEnd::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:com.woqutech.qdecoder.entry.TransactionEnd.props)
  return &props_;
}
inline const ::com::woqutech::qdecoder::entry::Pair& TransactionEnd::props(int index) const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.TransactionEnd.props)
  return props_.Get(index);
}
inline ::com::woqutech::qdecoder::entry::Pair* TransactionEnd::add_props() {
  // @@protoc_insertion_point(field_add:com.woqutech.qdecoder.entry.TransactionEnd.props)
  return props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::woqutech::qdecoder::entry::Pair >&
TransactionEnd::props() const {
  // @@protoc_insertion_point(field_list:com.woqutech.qdecoder.entry.TransactionEnd.props)
  return props_;
}

// -------------------------------------------------------------------

// Pair

// string key = 1;
inline void Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Pair.key)
  return key_.GetNoArena();
}
inline void Pair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Pair.key)
}
#if LANG_CXX11
inline void Pair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Pair.key)
}
#endif
inline void Pair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Pair.key)
}
inline void Pair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Pair.key)
}
inline ::std::string* Pair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Pair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Pair.key)
}

// string value = 2;
inline void Pair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:com.woqutech.qdecoder.entry.Pair.value)
  return value_.GetNoArena();
}
inline void Pair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.woqutech.qdecoder.entry.Pair.value)
}
#if LANG_CXX11
inline void Pair::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.woqutech.qdecoder.entry.Pair.value)
}
#endif
inline void Pair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.woqutech.qdecoder.entry.Pair.value)
}
inline void Pair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.woqutech.qdecoder.entry.Pair.value)
}
inline ::std::string* Pair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:com.woqutech.qdecoder.entry.Pair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pair::release_value() {
  // @@protoc_insertion_point(field_release:com.woqutech.qdecoder.entry.Pair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.woqutech.qdecoder.entry.Pair.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace entry
}  // namespace qdecoder
}  // namespace woqutech
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::woqutech::qdecoder::entry::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::woqutech::qdecoder::entry::EntryType>() {
  return ::com::woqutech::qdecoder::entry::EntryType_descriptor();
}
template <> struct is_proto_enum< ::com::woqutech::qdecoder::entry::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::woqutech::qdecoder::entry::EventType>() {
  return ::com::woqutech::qdecoder::entry::EventType_descriptor();
}
template <> struct is_proto_enum< ::com::woqutech::qdecoder::entry::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::woqutech::qdecoder::entry::Type>() {
  return ::com::woqutech::qdecoder::entry::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_QDDEntry_2eproto
