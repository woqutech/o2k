// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BinlogPackage.proto

#include "BinlogPackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace com {
namespace woqutech {
namespace binlog {
namespace packages {
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
  ::google::protobuf::int32 magic_number_;
  ::google::protobuf::int32 version_;
  int compression_;
} _Packet_default_instance_;
class HeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeat>
      _instance;
} _HeartBeat_default_instance_;
class HandshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Handshake>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr communication_encoding_;
} _Handshake_default_instance_;
class ClientAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientAuth>
      _instance;
  ::google::protobuf::int32 net_read_timeout_;
  ::google::protobuf::int32 net_write_timeout_;
} _ClientAuth_default_instance_;
class AckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ack>
      _instance;
  ::google::protobuf::int32 error_code_;
} _Ack_default_instance_;
class ClientAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientAck>
      _instance;
} _ClientAck_default_instance_;
class SubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sub>
      _instance;
} _Sub_default_instance_;
class UnsubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unsub>
      _instance;
} _Unsub_default_instance_;
class GetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Get>
      _instance;
  ::google::protobuf::int64 timeout_;
  ::google::protobuf::int32 unit_;
  bool auto_ack_;
} _Get_default_instance_;
class MessagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Messages>
      _instance;
} _Messages_default_instance_;
class DumpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dump>
      _instance;
  ::google::protobuf::int64 timestamp_;
} _Dump_default_instance_;
class ClientRollbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientRollback>
      _instance;
} _ClientRollback_default_instance_;
}  // namespace packages
}  // namespace binlog
}  // namespace woqutech
}  // namespace com
namespace protobuf_BinlogPackage_2eproto {
static void InitDefaultsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Packet_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPacket}, {}};

static void InitDefaultsHeartBeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_HeartBeat_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::HeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::HeartBeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartBeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartBeat}, {}};

static void InitDefaultsHandshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Handshake_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Handshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Handshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Handshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHandshake}, {}};

static void InitDefaultsClientAuth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_ClientAuth_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::ClientAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::ClientAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientAuth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientAuth}, {}};

static void InitDefaultsAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Ack_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAck}, {}};

static void InitDefaultsClientAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_ClientAck_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::ClientAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::ClientAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientAck}, {}};

static void InitDefaultsSub() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Sub_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Sub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Sub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sub =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSub}, {}};

static void InitDefaultsUnsub() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Unsub_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Unsub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Unsub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Unsub =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnsub}, {}};

static void InitDefaultsGet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Get_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Get();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Get::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Get =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGet}, {}};

static void InitDefaultsMessages() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Messages_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Messages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Messages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Messages =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessages}, {}};

static void InitDefaultsDump() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_Dump_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::Dump();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::Dump::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Dump =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDump}, {}};

static void InitDefaultsClientRollback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::packages::_ClientRollback_default_instance_;
    new (ptr) ::com::woqutech::binlog::packages::ClientRollback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::packages::ClientRollback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientRollback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientRollback}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Packet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartBeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Handshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientAuth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sub.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unsub.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Get.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Messages.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dump.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientRollback.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::woqutech::binlog::packages::PacketDefaultTypeInternal, magic_number_),
  offsetof(::com::woqutech::binlog::packages::PacketDefaultTypeInternal, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, type_),
  offsetof(::com::woqutech::binlog::packages::PacketDefaultTypeInternal, compression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, magic_number_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, version_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Packet, compression_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::HeartBeat, send_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::HeartBeat, start_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Handshake, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::woqutech::binlog::packages::HandshakeDefaultTypeInternal, communication_encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Handshake, seeds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Handshake, supported_compressions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Handshake, communication_encoding_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, password_),
  offsetof(::com::woqutech::binlog::packages::ClientAuthDefaultTypeInternal, net_read_timeout_),
  offsetof(::com::woqutech::binlog::packages::ClientAuthDefaultTypeInternal, net_write_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, net_read_timeout_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAuth, net_write_timeout_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Ack, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::woqutech::binlog::packages::AckDefaultTypeInternal, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Ack, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Ack, error_code_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAck, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAck, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientAck, batch_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Sub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Sub, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Sub, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Sub, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Unsub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Unsub, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Unsub, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Unsub, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, fetch_size_),
  offsetof(::com::woqutech::binlog::packages::GetDefaultTypeInternal, timeout_),
  offsetof(::com::woqutech::binlog::packages::GetDefaultTypeInternal, unit_),
  offsetof(::com::woqutech::binlog::packages::GetDefaultTypeInternal, auto_ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, timeout_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, unit_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Get, auto_ack_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Messages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Messages, batch_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Messages, messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, journal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, position_),
  offsetof(::com::woqutech::binlog::packages::DumpDefaultTypeInternal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, gtid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::Dump, timestamp_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientRollback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientRollback, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientRollback, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::packages::ClientRollback, batch_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::woqutech::binlog::packages::Packet)},
  { 13, -1, sizeof(::com::woqutech::binlog::packages::HeartBeat)},
  { 20, -1, sizeof(::com::woqutech::binlog::packages::Handshake)},
  { 29, -1, sizeof(::com::woqutech::binlog::packages::ClientAuth)},
  { 44, -1, sizeof(::com::woqutech::binlog::packages::Ack)},
  { 52, -1, sizeof(::com::woqutech::binlog::packages::ClientAck)},
  { 60, -1, sizeof(::com::woqutech::binlog::packages::Sub)},
  { 68, -1, sizeof(::com::woqutech::binlog::packages::Unsub)},
  { 76, -1, sizeof(::com::woqutech::binlog::packages::Get)},
  { 90, -1, sizeof(::com::woqutech::binlog::packages::Messages)},
  { 97, -1, sizeof(::com::woqutech::binlog::packages::Dump)},
  { 107, -1, sizeof(::com::woqutech::binlog::packages::ClientRollback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_HeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Handshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_ClientAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_ClientAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Sub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Unsub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Get_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Messages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_Dump_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::packages::_ClientRollback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BinlogPackage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023BinlogPackage.proto\022\034com.woqutech.binl"
      "og.packages\"\375\001\n\006Packet\022\026\n\014magic_number\030\001"
      " \001(\005H\000\022\021\n\007version\030\002 \001(\005H\001\0226\n\004type\030\003 \001(\0162"
      "(.com.woqutech.binlog.packages.PacketTyp"
      "e\022@\n\013compression\030\004 \001(\0162).com.woqutech.bi"
      "nlog.packages.CompressionH\002\022\014\n\004body\030\005 \001("
      "\014B\026\n\024magic_number_presentB\021\n\017version_pre"
      "sentB\025\n\023compression_present\"<\n\tHeartBeat"
      "\022\026\n\016send_timestamp\030\001 \001(\003\022\027\n\017start_timest"
      "amp\030\002 \001(\003\"\251\001\n\tHandshake\022 \n\026communication"
      "_encoding\030\001 \001(\tH\000\022\r\n\005seeds\030\002 \001(\014\022I\n\026supp"
      "orted_compressions\030\003 \001(\0162).com.woqutech."
      "binlog.packages.CompressionB \n\036communica"
      "tion_encoding_present\"\363\001\n\nClientAuth\022\020\n\010"
      "username\030\001 \001(\t\022\020\n\010password\030\002 \001(\014\022\032\n\020net_"
      "read_timeout\030\003 \001(\005H\000\022\033\n\021net_write_timeou"
      "t\030\004 \001(\005H\001\022\023\n\013destination\030\005 \001(\t\022\021\n\tclient"
      "_id\030\006 \001(\t\022\016\n\006filter\030\007 \001(\t\022\027\n\017start_times"
      "tamp\030\010 \001(\003B\032\n\030net_read_timeout_presentB\033"
      "\n\031net_write_timeout_present\"H\n\003Ack\022\024\n\ner"
      "ror_code\030\001 \001(\005H\000\022\025\n\rerror_message\030\002 \001(\tB"
      "\024\n\022error_code_present\"E\n\tClientAck\022\023\n\013de"
      "stination\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\020\n\010ba"
      "tch_id\030\003 \001(\003\"=\n\003Sub\022\023\n\013destination\030\001 \001(\t"
      "\022\021\n\tclient_id\030\002 \001(\t\022\016\n\006filter\030\007 \001(\t\"\?\n\005U"
      "nsub\022\023\n\013destination\030\001 \001(\t\022\021\n\tclient_id\030\002"
      " \001(\t\022\016\n\006filter\030\007 \001(\t\"\257\001\n\003Get\022\023\n\013destinat"
      "ion\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\022\n\nfetch_si"
      "ze\030\003 \001(\005\022\021\n\007timeout\030\004 \001(\003H\000\022\016\n\004unit\030\005 \001("
      "\005H\001\022\022\n\010auto_ack\030\006 \001(\010H\002B\021\n\017timeout_prese"
      "ntB\016\n\014unit_presentB\022\n\020auto_ack_present\"."
      "\n\010Messages\022\020\n\010batch_id\030\001 \001(\003\022\020\n\010messages"
      "\030\002 \003(\014\"a\n\004Dump\022\017\n\007journal\030\001 \001(\t\022\020\n\010posit"
      "ion\030\002 \001(\003\022\023\n\ttimestamp\030\003 \001(\003H\000\022\014\n\004gtid\030\004"
      " \001(\tB\023\n\021timestamp_present\"J\n\016ClientRollb"
      "ack\022\023\n\013destination\030\001 \001(\t\022\021\n\tclient_id\030\002 "
      "\001(\t\022\020\n\010batch_id\030\003 \001(\003*U\n\013Compression\022\037\n\033"
      "COMPRESSIONCOMPATIBLEPROTO2\020\000\022\010\n\004NONE\020\001\022"
      "\010\n\004ZLIB\020\002\022\010\n\004GZIP\020\003\022\007\n\003LZF\020\004*\346\001\n\nPacketT"
      "ype\022\037\n\033PACKAGETYPECOMPATIBLEPROTO2\020\000\022\r\n\t"
      "HANDSHAKE\020\001\022\030\n\024CLIENTAUTHENTICATION\020\002\022\007\n"
      "\003ACK\020\003\022\020\n\014SUBSCRIPTION\020\004\022\022\n\016UNSUBSCRIPTI"
      "ON\020\005\022\007\n\003GET\020\006\022\014\n\010MESSAGES\020\007\022\r\n\tCLIENTACK"
      "\020\010\022\014\n\010SHUTDOWN\020\t\022\010\n\004DUMP\020\n\022\r\n\tHEARTBEAT\020"
      "\013\022\022\n\016CLIENTROLLBACK\020\014B.\n\034com.woqutech.bi"
      "nlog.packagesB\014BinlogPacketH\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BinlogPackage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BinlogPackage_2eproto
namespace com {
namespace woqutech {
namespace binlog {
namespace packages {
const ::google::protobuf::EnumDescriptor* Compression_descriptor() {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BinlogPackage_2eproto::file_level_enum_descriptors[0];
}
bool Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BinlogPackage_2eproto::file_level_enum_descriptors[1];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_Packet_default_instance_.magic_number_ = 0;
  ::com::woqutech::binlog::packages::_Packet_default_instance_.version_ = 0;
  ::com::woqutech::binlog::packages::_Packet_default_instance_.compression_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kMagicNumberFieldNumber;
const int Packet::kVersionFieldNumber;
const int Packet::kTypeFieldNumber;
const int Packet::kCompressionFieldNumber;
const int Packet::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  type_ = from.type_;
  clear_has_magic_number_present();
  switch (from.magic_number_present_case()) {
    case kMagicNumber: {
      set_magic_number(from.magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_version_present();
  switch (from.version_present_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_compression_present();
  switch (from.compression_present_case()) {
    case kCompression: {
      set_compression(from.compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Packet)
}

void Packet::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_magic_number_present();
  clear_has_version_present();
  clear_has_compression_present();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_magic_number_present()) {
    clear_magic_number_present();
  }
  if (has_version_present()) {
    clear_version_present();
  }
  if (has_compression_present()) {
    clear_compression_present();
  }
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Packet.base);
  return *internal_default_instance();
}


void Packet::clear_magic_number_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Packet)
  switch (magic_number_present_case()) {
    case kMagicNumber: {
      // No need to clear
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAGIC_NUMBER_PRESENT_NOT_SET;
}

void Packet::clear_version_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Packet)
  switch (version_present_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = VERSION_PRESENT_NOT_SET;
}

void Packet::clear_compression_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Packet)
  switch (compression_present_case()) {
    case kCompression: {
      // No need to clear
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = COMPRESSION_PRESENT_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_magic_number_present();
  clear_version_present();
  clear_compression_present();
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 magic_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_magic_number_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_number_present_.magic_number_)));
          set_has_magic_number();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_version_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_present_.version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.packages.PacketType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::woqutech::binlog::packages::PacketType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.packages.Compression compression = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compression(static_cast< ::com::woqutech::binlog::packages::Compression >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 magic_number = 1;
  if (has_magic_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->magic_number(), output);
  }

  // int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // .com.woqutech.binlog.packages.PacketType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .com.woqutech.binlog.packages.Compression compression = 4;
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compression(), output);
  }

  // bytes body = 5;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 magic_number = 1;
  if (has_magic_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->magic_number(), target);
  }

  // int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // .com.woqutech.binlog.packages.PacketType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .com.woqutech.binlog.packages.Compression compression = 4;
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compression(), target);
  }

  // bytes body = 5;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Packet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes body = 5;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // .com.woqutech.binlog.packages.PacketType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (magic_number_present_case()) {
    // int32 magic_number = 1;
    case kMagicNumber: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (version_present_case()) {
    // int32 version = 2;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (compression_present_case()) {
    // .com.woqutech.binlog.packages.Compression compression = 4;
    case kCompression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.magic_number_present_case()) {
    case kMagicNumber: {
      set_magic_number(from.magic_number());
      break;
    }
    case MAGIC_NUMBER_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.version_present_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.compression_present_case()) {
    case kCompression: {
      set_compression(from.compression());
      break;
    }
    case COMPRESSION_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(magic_number_present_, other->magic_number_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(version_present_, other->version_present_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(compression_present_, other->compression_present_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeat::kSendTimestampFieldNumber;
const int HeartBeat::kStartTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_HeartBeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&send_timestamp_, &from.send_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_timestamp_) -
    reinterpret_cast<char*>(&send_timestamp_)) + sizeof(start_timestamp_));
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.HeartBeat)
}

void HeartBeat::SharedCtor() {
  ::memset(&send_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_timestamp_) -
      reinterpret_cast<char*>(&send_timestamp_)) + sizeof(start_timestamp_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
}

void HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeat& HeartBeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_HeartBeat.base);
  return *internal_default_instance();
}


void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.HeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&send_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_timestamp_) -
      reinterpret_cast<char*>(&send_timestamp_)) + sizeof(start_timestamp_));
  _internal_metadata_.Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.HeartBeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 send_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.HeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_timestamp = 1;
  if (this->send_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->send_timestamp(), output);
  }

  // int64 start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.HeartBeat)
}

::google::protobuf::uint8* HeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.HeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_timestamp = 1;
  if (this->send_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->send_timestamp(), target);
  }

  // int64 start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.HeartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 send_timestamp = 1;
  if (this->send_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_timestamp());
  }

  // int64 start_timestamp = 2;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.HeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_timestamp() != 0) {
    set_send_timestamp(from.send_timestamp());
  }
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  swap(send_timestamp_, other->send_timestamp_);
  swap(start_timestamp_, other->start_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Handshake::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_Handshake_default_instance_.communication_encoding_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Handshake::kCommunicationEncodingFieldNumber;
const int Handshake::kSeedsFieldNumber;
const int Handshake::kSupportedCompressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Handshake::Handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Handshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Handshake)
}
Handshake::Handshake(const Handshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seeds_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seeds().size() > 0) {
    seeds_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seeds_);
  }
  supported_compressions_ = from.supported_compressions_;
  clear_has_communication_encoding_present();
  switch (from.communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      set_communication_encoding(from.communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Handshake)
}

void Handshake::SharedCtor() {
  seeds_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_compressions_ = 0;
  clear_has_communication_encoding_present();
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Handshake)
  SharedDtor();
}

void Handshake::SharedDtor() {
  seeds_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_communication_encoding_present()) {
    clear_communication_encoding_present();
  }
}

void Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Handshake::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Handshake& Handshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Handshake.base);
  return *internal_default_instance();
}


void Handshake::clear_communication_encoding_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Handshake)
  switch (communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      communication_encoding_present_.communication_encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMUNICATION_ENCODING_PRESENT_NOT_SET;
}


void Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seeds_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supported_compressions_ = 0;
  clear_communication_encoding_present();
  _internal_metadata_.Clear();
}

bool Handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Handshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string communication_encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_communication_encoding()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communication_encoding().data(), static_cast<int>(this->communication_encoding().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Handshake.communication_encoding"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes seeds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.packages.Compression supported_compressions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supported_compressions(static_cast< ::com::woqutech::binlog::packages::Compression >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Handshake)
  return false;
#undef DO_
}

void Handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string communication_encoding = 1;
  if (has_communication_encoding()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication_encoding().data(), static_cast<int>(this->communication_encoding().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Handshake.communication_encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->communication_encoding(), output);
  }

  // bytes seeds = 2;
  if (this->seeds().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->seeds(), output);
  }

  // .com.woqutech.binlog.packages.Compression supported_compressions = 3;
  if (this->supported_compressions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->supported_compressions(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Handshake)
}

::google::protobuf::uint8* Handshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string communication_encoding = 1;
  if (has_communication_encoding()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communication_encoding().data(), static_cast<int>(this->communication_encoding().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Handshake.communication_encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->communication_encoding(), target);
  }

  // bytes seeds = 2;
  if (this->seeds().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->seeds(), target);
  }

  // .com.woqutech.binlog.packages.Compression supported_compressions = 3;
  if (this->supported_compressions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->supported_compressions(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Handshake)
  return target;
}

size_t Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Handshake)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes seeds = 2;
  if (this->seeds().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->seeds());
  }

  // .com.woqutech.binlog.packages.Compression supported_compressions = 3;
  if (this->supported_compressions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supported_compressions());
  }

  switch (communication_encoding_present_case()) {
    // string communication_encoding = 1;
    case kCommunicationEncoding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Handshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Handshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Handshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Handshake)
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seeds().size() > 0) {

    seeds_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seeds_);
  }
  if (from.supported_compressions() != 0) {
    set_supported_compressions(from.supported_compressions());
  }
  switch (from.communication_encoding_present_case()) {
    case kCommunicationEncoding: {
      set_communication_encoding(from.communication_encoding());
      break;
    }
    case COMMUNICATION_ENCODING_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Handshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {
  return true;
}

void Handshake::Swap(Handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Handshake::InternalSwap(Handshake* other) {
  using std::swap;
  seeds_.Swap(&other->seeds_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(supported_compressions_, other->supported_compressions_);
  swap(communication_encoding_present_, other->communication_encoding_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Handshake::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientAuth::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_ClientAuth_default_instance_.net_read_timeout_ = 0;
  ::com::woqutech::binlog::packages::_ClientAuth_default_instance_.net_write_timeout_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientAuth::kUsernameFieldNumber;
const int ClientAuth::kPasswordFieldNumber;
const int ClientAuth::kNetReadTimeoutFieldNumber;
const int ClientAuth::kNetWriteTimeoutFieldNumber;
const int ClientAuth::kDestinationFieldNumber;
const int ClientAuth::kClientIdFieldNumber;
const int ClientAuth::kFilterFieldNumber;
const int ClientAuth::kStartTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientAuth::ClientAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_ClientAuth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.ClientAuth)
}
ClientAuth::ClientAuth(const ClientAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  start_timestamp_ = from.start_timestamp_;
  clear_has_net_read_timeout_present();
  switch (from.net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      set_net_read_timeout(from.net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_net_write_timeout_present();
  switch (from.net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      set_net_write_timeout(from.net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.ClientAuth)
}

void ClientAuth::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_net_read_timeout_present();
  clear_has_net_write_timeout_present();
}

ClientAuth::~ClientAuth() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.ClientAuth)
  SharedDtor();
}

void ClientAuth::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_net_read_timeout_present()) {
    clear_net_read_timeout_present();
  }
  if (has_net_write_timeout_present()) {
    clear_net_write_timeout_present();
  }
}

void ClientAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientAuth::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientAuth& ClientAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_ClientAuth.base);
  return *internal_default_instance();
}


void ClientAuth::clear_net_read_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.ClientAuth)
  switch (net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      // No need to clear
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NET_READ_TIMEOUT_PRESENT_NOT_SET;
}

void ClientAuth::clear_net_write_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.ClientAuth)
  switch (net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      // No need to clear
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = NET_WRITE_TIMEOUT_PRESENT_NOT_SET;
}


void ClientAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.ClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_timestamp_ = GOOGLE_LONGLONG(0);
  clear_net_read_timeout_present();
  clear_net_write_timeout_present();
  _internal_metadata_.Clear();
}

bool ClientAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.ClientAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAuth.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 net_read_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_net_read_timeout_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_read_timeout_present_.net_read_timeout_)));
          set_has_net_read_timeout();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 net_write_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_net_write_timeout_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_write_timeout_present_.net_write_timeout_)));
          set_has_net_write_timeout();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAuth.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAuth.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAuth.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.ClientAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.ClientAuth)
  return false;
#undef DO_
}

void ClientAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.ClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // int32 net_read_timeout = 3;
  if (has_net_read_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->net_read_timeout(), output);
  }

  // int32 net_write_timeout = 4;
  if (has_net_write_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->net_write_timeout(), output);
  }

  // string destination = 5;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->destination(), output);
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_id(), output);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  // int64 start_timestamp = 8;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.ClientAuth)
}

::google::protobuf::uint8* ClientAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.ClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // int32 net_read_timeout = 3;
  if (has_net_read_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->net_read_timeout(), target);
  }

  // int32 net_write_timeout = 4;
  if (has_net_write_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->net_write_timeout(), target);
  }

  // string destination = 5;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->destination(), target);
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_id(), target);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAuth.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  // int64 start_timestamp = 8;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.ClientAuth)
  return target;
}

size_t ClientAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.ClientAuth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  // string destination = 5;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int64 start_timestamp = 8;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_timestamp());
  }

  switch (net_read_timeout_present_case()) {
    // int32 net_read_timeout = 3;
    case kNetReadTimeout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (net_write_timeout_present_case()) {
    // int32 net_write_timeout = 4;
    case kNetWriteTimeout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.ClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.ClientAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.ClientAuth)
    MergeFrom(*source);
  }
}

void ClientAuth::MergeFrom(const ClientAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.ClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  switch (from.net_read_timeout_present_case()) {
    case kNetReadTimeout: {
      set_net_read_timeout(from.net_read_timeout());
      break;
    }
    case NET_READ_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.net_write_timeout_present_case()) {
    case kNetWriteTimeout: {
      set_net_write_timeout(from.net_write_timeout());
      break;
    }
    case NET_WRITE_TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
}

void ClientAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.ClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAuth::CopyFrom(const ClientAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.ClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAuth::IsInitialized() const {
  return true;
}

void ClientAuth::Swap(ClientAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientAuth::InternalSwap(ClientAuth* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(net_read_timeout_present_, other->net_read_timeout_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(net_write_timeout_present_, other->net_write_timeout_present_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientAuth::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ack::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_Ack_default_instance_.error_code_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ack::kErrorCodeFieldNumber;
const int Ack::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ack::Ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Ack)
}
Ack::Ack(const Ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  clear_has_error_code_present();
  switch (from.error_code_present_case()) {
    case kErrorCode: {
      set_error_code(from.error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Ack)
}

void Ack::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_code_present();
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_error_code_present()) {
    clear_error_code_present();
  }
}

void Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ack& Ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Ack.base);
  return *internal_default_instance();
}


void Ack::clear_error_code_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Ack)
  switch (error_code_present_case()) {
    case kErrorCode: {
      // No need to clear
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ERROR_CODE_PRESENT_NOT_SET;
}


void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_error_code_present();
  _internal_metadata_.Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_error_code_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_present_.error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Ack.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Ack.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Ack)
}

::google::protobuf::uint8* Ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Ack.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  switch (error_code_present_case()) {
    // int32 error_code = 1;
    case kErrorCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const Ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  switch (from.error_code_present_case()) {
    case kErrorCode: {
      set_error_code(from.error_code());
      break;
    }
    case ERROR_CODE_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::Swap(Ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ack::InternalSwap(Ack* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_present_, other->error_code_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientAck::kDestinationFieldNumber;
const int ClientAck::kClientIdFieldNumber;
const int ClientAck::kBatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientAck::ClientAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_ClientAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.ClientAck)
}
ClientAck::ClientAck(const ClientAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  batch_id_ = from.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.ClientAck)
}

void ClientAck::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_id_ = GOOGLE_LONGLONG(0);
}

ClientAck::~ClientAck() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.ClientAck)
  SharedDtor();
}

void ClientAck::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientAck::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientAck& ClientAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_ClientAck.base);
  return *internal_default_instance();
}


void ClientAck::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.ClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ClientAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.ClientAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAck.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientAck.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 batch_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.ClientAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.ClientAck)
  return false;
#undef DO_
}

void ClientAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.ClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAck.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAck.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->batch_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.ClientAck)
}

::google::protobuf::uint8* ClientAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.ClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAck.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientAck.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->batch_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.ClientAck)
  return target;
}

size_t ClientAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.ClientAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.ClientAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.ClientAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.ClientAck)
    MergeFrom(*source);
  }
}

void ClientAck::MergeFrom(const ClientAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.ClientAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.batch_id() != 0) {
    set_batch_id(from.batch_id());
  }
}

void ClientAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.ClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientAck::CopyFrom(const ClientAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.ClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAck::IsInitialized() const {
  return true;
}

void ClientAck::Swap(ClientAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientAck::InternalSwap(ClientAck* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_id_, other->batch_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientAck::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sub::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sub::kDestinationFieldNumber;
const int Sub::kClientIdFieldNumber;
const int Sub::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sub::Sub()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Sub.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Sub)
}
Sub::Sub(const Sub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Sub)
}

void Sub::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Sub::~Sub() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Sub)
  SharedDtor();
}

void Sub::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sub::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sub& Sub::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Sub.base);
  return *internal_default_instance();
}


void Sub::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Sub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Sub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Sub.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Sub.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Sub.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Sub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Sub)
  return false;
#undef DO_
}

void Sub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Sub)
}

::google::protobuf::uint8* Sub::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Sub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Sub.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Sub)
  return target;
}

size_t Sub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Sub)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Sub)
  GOOGLE_DCHECK_NE(&from, this);
  const Sub* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sub>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Sub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Sub)
    MergeFrom(*source);
  }
}

void Sub::MergeFrom(const Sub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Sub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void Sub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sub::CopyFrom(const Sub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Sub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sub::IsInitialized() const {
  return true;
}

void Sub::Swap(Sub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sub::InternalSwap(Sub* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sub::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unsub::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unsub::kDestinationFieldNumber;
const int Unsub::kClientIdFieldNumber;
const int Unsub::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unsub::Unsub()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Unsub.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Unsub)
}
Unsub::Unsub(const Unsub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Unsub)
}

void Unsub::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Unsub::~Unsub() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Unsub)
  SharedDtor();
}

void Unsub::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Unsub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unsub::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unsub& Unsub::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Unsub.base);
  return *internal_default_instance();
}


void Unsub::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Unsub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Unsub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Unsub.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Unsub.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Unsub.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Unsub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Unsub)
  return false;
#undef DO_
}

void Unsub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Unsub)
}

::google::protobuf::uint8* Unsub::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Unsub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Unsub.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Unsub)
  return target;
}

size_t Unsub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Unsub)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unsub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Unsub)
  GOOGLE_DCHECK_NE(&from, this);
  const Unsub* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unsub>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Unsub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Unsub)
    MergeFrom(*source);
  }
}

void Unsub::MergeFrom(const Unsub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Unsub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void Unsub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Unsub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unsub::CopyFrom(const Unsub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Unsub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unsub::IsInitialized() const {
  return true;
}

void Unsub::Swap(Unsub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unsub::InternalSwap(Unsub* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unsub::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Get::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_Get_default_instance_.timeout_ = GOOGLE_LONGLONG(0);
  ::com::woqutech::binlog::packages::_Get_default_instance_.unit_ = 0;
  ::com::woqutech::binlog::packages::_Get_default_instance_.auto_ack_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Get::kDestinationFieldNumber;
const int Get::kClientIdFieldNumber;
const int Get::kFetchSizeFieldNumber;
const int Get::kTimeoutFieldNumber;
const int Get::kUnitFieldNumber;
const int Get::kAutoAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Get::Get()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Get.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Get)
}
Get::Get(const Get& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  fetch_size_ = from.fetch_size_;
  clear_has_timeout_present();
  switch (from.timeout_present_case()) {
    case kTimeout: {
      set_timeout(from.timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_unit_present();
  switch (from.unit_present_case()) {
    case kUnit: {
      set_unit(from.unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_auto_ack_present();
  switch (from.auto_ack_present_case()) {
    case kAutoAck: {
      set_auto_ack(from.auto_ack());
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Get)
}

void Get::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetch_size_ = 0;
  clear_has_timeout_present();
  clear_has_unit_present();
  clear_has_auto_ack_present();
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Get)
  SharedDtor();
}

void Get::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_timeout_present()) {
    clear_timeout_present();
  }
  if (has_unit_present()) {
    clear_unit_present();
  }
  if (has_auto_ack_present()) {
    clear_auto_ack_present();
  }
}

void Get::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Get::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Get& Get::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Get.base);
  return *internal_default_instance();
}


void Get::clear_timeout_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Get)
  switch (timeout_present_case()) {
    case kTimeout: {
      // No need to clear
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIMEOUT_PRESENT_NOT_SET;
}

void Get::clear_unit_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Get)
  switch (unit_present_case()) {
    case kUnit: {
      // No need to clear
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = UNIT_PRESENT_NOT_SET;
}

void Get::clear_auto_ack_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Get)
  switch (auto_ack_present_case()) {
    case kAutoAck: {
      // No need to clear
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = AUTO_ACK_PRESENT_NOT_SET;
}


void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetch_size_ = 0;
  clear_timeout_present();
  clear_unit_present();
  clear_auto_ack_present();
  _internal_metadata_.Clear();
}

bool Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Get)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Get.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Get.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fetch_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_timeout_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_present_.timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_unit_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_present_.unit_)));
          set_has_unit();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_ack = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_auto_ack_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_ack_present_.auto_ack_)));
          set_has_auto_ack();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Get)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Get)
  return false;
#undef DO_
}

void Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Get.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Get.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // int32 fetch_size = 3;
  if (this->fetch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch_size(), output);
  }

  // int64 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timeout(), output);
  }

  // int32 unit = 5;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unit(), output);
  }

  // bool auto_ack = 6;
  if (has_auto_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_ack(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Get)
}

::google::protobuf::uint8* Get::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Get.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Get.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // int32 fetch_size = 3;
  if (this->fetch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch_size(), target);
  }

  // int64 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timeout(), target);
  }

  // int32 unit = 5;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unit(), target);
  }

  // bool auto_ack = 6;
  if (has_auto_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_ack(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Get)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int32 fetch_size = 3;
  if (this->fetch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fetch_size());
  }

  switch (timeout_present_case()) {
    // int64 timeout = 4;
    case kTimeout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (unit_present_case()) {
    // int32 unit = 5;
    case kUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (auto_ack_present_case()) {
    // bool auto_ack = 6;
    case kAutoAck: {
      total_size += 1 + 1;
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Get::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Get)
  GOOGLE_DCHECK_NE(&from, this);
  const Get* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Get>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Get)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Get)
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Get)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.fetch_size() != 0) {
    set_fetch_size(from.fetch_size());
  }
  switch (from.timeout_present_case()) {
    case kTimeout: {
      set_timeout(from.timeout());
      break;
    }
    case TIMEOUT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.unit_present_case()) {
    case kUnit: {
      set_unit(from.unit());
      break;
    }
    case UNIT_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.auto_ack_present_case()) {
    case kAutoAck: {
      set_auto_ack(from.auto_ack());
      break;
    }
    case AUTO_ACK_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Get::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::Swap(Get* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Get::InternalSwap(Get* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fetch_size_, other->fetch_size_);
  swap(timeout_present_, other->timeout_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(unit_present_, other->unit_present_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(auto_ack_present_, other->auto_ack_present_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Get::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Messages::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Messages::kBatchIdFieldNumber;
const int Messages::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Messages::Messages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Messages.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Messages)
}
Messages::Messages(const Messages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_id_ = from.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Messages)
}

void Messages::SharedCtor() {
  batch_id_ = GOOGLE_LONGLONG(0);
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Messages)
  SharedDtor();
}

void Messages::SharedDtor() {
}

void Messages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Messages::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Messages& Messages::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Messages.base);
  return *internal_default_instance();
}


void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  batch_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Messages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Messages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 batch_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes messages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Messages)
  return false;
#undef DO_
}

void Messages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 batch_id = 1;
  if (this->batch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->batch_id(), output);
  }

  // repeated bytes messages = 2;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->messages(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Messages)
}

::google::protobuf::uint8* Messages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Messages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 batch_id = 1;
  if (this->batch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->batch_id(), target);
  }

  // repeated bytes messages = 2;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->messages(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Messages)
  return target;
}

size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Messages)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes messages = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->messages_size());
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->messages(i));
  }

  // int64 batch_id = 1;
  if (this->batch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Messages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  const Messages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Messages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Messages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Messages)
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.batch_id() != 0) {
    set_batch_id(from.batch_id());
  }
}

void Messages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::Swap(Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Messages::InternalSwap(Messages* other) {
  using std::swap;
  messages_.InternalSwap(CastToBase(&other->messages_));
  swap(batch_id_, other->batch_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Messages::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Dump::InitAsDefaultInstance() {
  ::com::woqutech::binlog::packages::_Dump_default_instance_.timestamp_ = GOOGLE_LONGLONG(0);
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dump::kJournalFieldNumber;
const int Dump::kPositionFieldNumber;
const int Dump::kTimestampFieldNumber;
const int Dump::kGtidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dump::Dump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_Dump.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.Dump)
}
Dump::Dump(const Dump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  journal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.journal().size() > 0) {
    journal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journal_);
  }
  gtid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gtid().size() > 0) {
    gtid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtid_);
  }
  position_ = from.position_;
  clear_has_timestamp_present();
  switch (from.timestamp_present_case()) {
    case kTimestamp: {
      set_timestamp(from.timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.Dump)
}

void Dump::SharedCtor() {
  journal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_present();
}

Dump::~Dump() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.Dump)
  SharedDtor();
}

void Dump::SharedDtor() {
  journal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_timestamp_present()) {
    clear_timestamp_present();
  }
}

void Dump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Dump::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dump& Dump::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_Dump.base);
  return *internal_default_instance();
}


void Dump::clear_timestamp_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.packages.Dump)
  switch (timestamp_present_case()) {
    case kTimestamp: {
      // No need to clear
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIMESTAMP_PRESENT_NOT_SET;
}


void Dump::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.Dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  journal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = GOOGLE_LONGLONG(0);
  clear_timestamp_present();
  _internal_metadata_.Clear();
}

bool Dump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.Dump)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string journal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_journal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->journal().data(), static_cast<int>(this->journal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Dump.journal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_timestamp_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_present_.timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gtid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtid().data(), static_cast<int>(this->gtid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.Dump.gtid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.Dump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.Dump)
  return false;
#undef DO_
}

void Dump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.Dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string journal = 1;
  if (this->journal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journal().data(), static_cast<int>(this->journal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Dump.journal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->journal(), output);
  }

  // int64 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->position(), output);
  }

  // int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // string gtid = 4;
  if (this->gtid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtid().data(), static_cast<int>(this->gtid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Dump.gtid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gtid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.Dump)
}

::google::protobuf::uint8* Dump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.Dump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string journal = 1;
  if (this->journal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journal().data(), static_cast<int>(this->journal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Dump.journal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->journal(), target);
  }

  // int64 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->position(), target);
  }

  // int64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // string gtid = 4;
  if (this->gtid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtid().data(), static_cast<int>(this->gtid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.Dump.gtid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gtid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.Dump)
  return target;
}

size_t Dump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.Dump)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string journal = 1;
  if (this->journal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->journal());
  }

  // string gtid = 4;
  if (this->gtid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtid());
  }

  // int64 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->position());
  }

  switch (timestamp_present_case()) {
    // int64 timestamp = 3;
    case kTimestamp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.Dump)
  GOOGLE_DCHECK_NE(&from, this);
  const Dump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.Dump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.Dump)
    MergeFrom(*source);
  }
}

void Dump::MergeFrom(const Dump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.Dump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.journal().size() > 0) {

    journal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journal_);
  }
  if (from.gtid().size() > 0) {

    gtid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtid_);
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  switch (from.timestamp_present_case()) {
    case kTimestamp: {
      set_timestamp(from.timestamp());
      break;
    }
    case TIMESTAMP_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Dump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.Dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dump::CopyFrom(const Dump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.Dump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dump::IsInitialized() const {
  return true;
}

void Dump::Swap(Dump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dump::InternalSwap(Dump* other) {
  using std::swap;
  journal_.Swap(&other->journal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gtid_.Swap(&other->gtid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(timestamp_present_, other->timestamp_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Dump::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientRollback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientRollback::kDestinationFieldNumber;
const int ClientRollback::kClientIdFieldNumber;
const int ClientRollback::kBatchIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientRollback::ClientRollback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogPackage_2eproto::scc_info_ClientRollback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.packages.ClientRollback)
}
ClientRollback::ClientRollback(const ClientRollback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination().size() > 0) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  batch_id_ = from.batch_id_;
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.packages.ClientRollback)
}

void ClientRollback::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_id_ = GOOGLE_LONGLONG(0);
}

ClientRollback::~ClientRollback() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.packages.ClientRollback)
  SharedDtor();
}

void ClientRollback::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientRollback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientRollback::descriptor() {
  ::protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientRollback& ClientRollback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogPackage_2eproto::scc_info_ClientRollback.base);
  return *internal_default_instance();
}


void ClientRollback::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.packages.ClientRollback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ClientRollback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.packages.ClientRollback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string destination = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientRollback.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.packages.ClientRollback.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 batch_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &batch_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.packages.ClientRollback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.packages.ClientRollback)
  return false;
#undef DO_
}

void ClientRollback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.packages.ClientRollback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientRollback.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->destination(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientRollback.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->batch_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.packages.ClientRollback)
}

::google::protobuf::uint8* ClientRollback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.packages.ClientRollback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientRollback.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destination(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.packages.ClientRollback.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->batch_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.packages.ClientRollback)
  return target;
}

size_t ClientRollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.packages.ClientRollback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int64 batch_id = 3;
  if (this->batch_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->batch_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRollback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.packages.ClientRollback)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRollback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientRollback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.packages.ClientRollback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.packages.ClientRollback)
    MergeFrom(*source);
  }
}

void ClientRollback::MergeFrom(const ClientRollback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.packages.ClientRollback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.batch_id() != 0) {
    set_batch_id(from.batch_id());
  }
}

void ClientRollback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.packages.ClientRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRollback::CopyFrom(const ClientRollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.packages.ClientRollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRollback::IsInitialized() const {
  return true;
}

void ClientRollback::Swap(ClientRollback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRollback::InternalSwap(ClientRollback* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_id_, other->batch_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientRollback::GetMetadata() const {
  protobuf_BinlogPackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogPackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packages
}  // namespace binlog
}  // namespace woqutech
}  // namespace com
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Packet* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Packet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::HeartBeat* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::HeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::HeartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Handshake* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Handshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::ClientAuth* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::ClientAuth >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::ClientAuth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Ack* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Ack >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::ClientAck* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::ClientAck >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::ClientAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Sub* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Sub >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Sub >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Unsub* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Unsub >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Unsub >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Get* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Get >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Get >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Messages* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Messages >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Messages >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::Dump* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::Dump >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::Dump >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::packages::ClientRollback* Arena::CreateMaybeMessage< ::com::woqutech::binlog::packages::ClientRollback >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::packages::ClientRollback >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
