// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BinlogEntry.proto

#include "BinlogEntry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BinlogEntry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BinlogEntry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Pair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BinlogEntry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Column;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BinlogEntry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BinlogEntry_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RowData;
}  // namespace protobuf_BinlogEntry_2eproto
namespace com {
namespace woqutech {
namespace binlog {
namespace entry {
class EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Entry>
      _instance;
  int entrytype_;
} _Entry_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
  ::google::protobuf::int32 version_;
  int sourcetype_;
  int eventtype_;
} _Header_default_instance_;
class ColumnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Column>
      _instance;
  bool isnull_;
} _Column_default_instance_;
class RowDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RowData>
      _instance;
} _RowData_default_instance_;
class RowChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RowChange>
      _instance;
  int eventtype_;
  bool isddl_;
} _RowChange_default_instance_;
class TransactionBeginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionBegin>
      _instance;
} _TransactionBegin_default_instance_;
class TransactionEndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionEnd>
      _instance;
} _TransactionEnd_default_instance_;
class PairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pair>
      _instance;
} _Pair_default_instance_;
}  // namespace entry
}  // namespace binlog
}  // namespace woqutech
}  // namespace com
namespace protobuf_BinlogEntry_2eproto {
static void InitDefaultsEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_Entry_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEntry}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Header.base,}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_Header_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsColumn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_Column_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::Column();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::Column::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Column =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColumn}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsRowData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_RowData_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::RowData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::RowData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RowData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRowData}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Column.base,
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsRowChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_RowChange_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::RowChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::RowChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RowChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRowChange}, {
      &protobuf_BinlogEntry_2eproto::scc_info_RowData.base,
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsTransactionBegin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_TransactionBegin_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::TransactionBegin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::TransactionBegin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransactionBegin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransactionBegin}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsTransactionEnd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_TransactionEnd_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::TransactionEnd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::TransactionEnd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransactionEnd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransactionEnd}, {
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base,}};

static void InitDefaultsPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::woqutech::binlog::entry::_Pair_default_instance_;
    new (ptr) ::com::woqutech::binlog::entry::Pair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::woqutech::binlog::entry::Pair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Pair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPair}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Column.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RowData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RowChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionBegin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransactionEnd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pair.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Entry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Entry, header_),
  offsetof(::com::woqutech::binlog::entry::EntryDefaultTypeInternal, entrytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Entry, storevalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Entry, entryType_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::com::woqutech::binlog::entry::HeaderDefaultTypeInternal, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, logfilename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, logfileoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, serverencode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, executetime_),
  offsetof(::com::woqutech::binlog::entry::HeaderDefaultTypeInternal, sourcetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, schemaname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, tablename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, eventlength_),
  offsetof(::com::woqutech::binlog::entry::HeaderDefaultTypeInternal, eventtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, gtid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, version_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, sourceType_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Header, eventType_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, sqltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, iskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, updated_),
  offsetof(::com::woqutech::binlog::entry::ColumnDefaultTypeInternal, isnull_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, mysqltype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Column, isNull_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowData, beforecolumns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowData, aftercolumns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowData, props_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, tableid_),
  offsetof(::com::woqutech::binlog::entry::RowChangeDefaultTypeInternal, eventtype_),
  offsetof(::com::woqutech::binlog::entry::RowChangeDefaultTypeInternal, isddl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, rowdatas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, ddlschemaname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, eventType_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::RowChange, isDdl_present_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionBegin, executetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionBegin, transactionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionBegin, props_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionBegin, threadid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionEnd, executetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionEnd, transactionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::TransactionEnd, props_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Pair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::woqutech::binlog::entry::Pair, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::woqutech::binlog::entry::Entry)},
  { 9, -1, sizeof(::com::woqutech::binlog::entry::Header)},
  { 30, -1, sizeof(::com::woqutech::binlog::entry::Column)},
  { 46, -1, sizeof(::com::woqutech::binlog::entry::RowData)},
  { 54, -1, sizeof(::com::woqutech::binlog::entry::RowChange)},
  { 68, -1, sizeof(::com::woqutech::binlog::entry::TransactionBegin)},
  { 77, -1, sizeof(::com::woqutech::binlog::entry::TransactionEnd)},
  { 85, -1, sizeof(::com::woqutech::binlog::entry::Pair)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_Column_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_RowData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_RowChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_TransactionBegin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_TransactionEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::woqutech::binlog::entry::_Pair_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BinlogEntry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021BinlogEntry.proto\022\031com.woqutech.binlog"
      ".entry\"\236\001\n\005Entry\0221\n\006header\030\001 \001(\0132!.com.w"
      "oqutech.binlog.entry.Header\0229\n\tentryType"
      "\030\002 \001(\0162$.com.woqutech.binlog.entry.Entry"
      "TypeH\000\022\022\n\nstoreValue\030\003 \001(\014B\023\n\021entryType_"
      "present\"\256\003\n\006Header\022\021\n\007version\030\001 \001(\005H\000\022\023\n"
      "\013logfileName\030\002 \001(\t\022\025\n\rlogfileOffset\030\003 \001("
      "\003\022\020\n\010serverId\030\004 \001(\003\022\024\n\014serverenCode\030\005 \001("
      "\t\022\023\n\013executeTime\030\006 \001(\003\0225\n\nsourceType\030\007 \001"
      "(\0162\037.com.woqutech.binlog.entry.TypeH\001\022\022\n"
      "\nschemaName\030\010 \001(\t\022\021\n\ttableName\030\t \001(\t\022\023\n\013"
      "eventLength\030\n \001(\003\0229\n\teventType\030\013 \001(\0162$.c"
      "om.woqutech.binlog.entry.EventTypeH\002\022.\n\005"
      "props\030\014 \003(\0132\037.com.woqutech.binlog.entry."
      "Pair\022\014\n\004gtid\030\r \001(\tB\021\n\017version_presentB\024\n"
      "\022sourceType_presentB\023\n\021eventType_present"
      "\"\334\001\n\006Column\022\r\n\005index\030\001 \001(\005\022\017\n\007sqlType\030\002 "
      "\001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005isKey\030\004 \001(\010\022\017\n\007upda"
      "ted\030\005 \001(\010\022\020\n\006isNull\030\006 \001(\010H\000\022.\n\005props\030\007 \003"
      "(\0132\037.com.woqutech.binlog.entry.Pair\022\r\n\005v"
      "alue\030\010 \001(\t\022\016\n\006length\030\t \001(\005\022\021\n\tmysqlType\030"
      "\n \001(\tB\020\n\016isNull_present\"\254\001\n\007RowData\0228\n\rb"
      "eforeColumns\030\001 \003(\0132!.com.woqutech.binlog"
      ".entry.Column\0227\n\014afterColumns\030\002 \003(\0132!.co"
      "m.woqutech.binlog.entry.Column\022.\n\005props\030"
      "\003 \003(\0132\037.com.woqutech.binlog.entry.Pair\"\230"
      "\002\n\tRowChange\022\017\n\007tableId\030\001 \001(\003\0229\n\teventTy"
      "pe\030\002 \001(\0162$.com.woqutech.binlog.entry.Eve"
      "ntTypeH\000\022\017\n\005isDdl\030\n \001(\010H\001\022\013\n\003sql\030\013 \001(\t\0224"
      "\n\010rowDatas\030\014 \003(\0132\".com.woqutech.binlog.e"
      "ntry.RowData\022.\n\005props\030\r \003(\0132\037.com.woqute"
      "ch.binlog.entry.Pair\022\025\n\rddlSchemaName\030\016 "
      "\001(\tB\023\n\021eventType_presentB\017\n\risDdl_presen"
      "t\"\200\001\n\020TransactionBegin\022\023\n\013executeTime\030\001 "
      "\001(\003\022\025\n\rtransactionId\030\002 \001(\t\022.\n\005props\030\003 \003("
      "\0132\037.com.woqutech.binlog.entry.Pair\022\020\n\010th"
      "readId\030\004 \001(\003\"l\n\016TransactionEnd\022\023\n\013execut"
      "eTime\030\001 \001(\003\022\025\n\rtransactionId\030\002 \001(\t\022.\n\005pr"
      "ops\030\003 \003(\0132\037.com.woqutech.binlog.entry.Pa"
      "ir\"\"\n\004Pair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t*}"
      "\n\tEntryType\022\035\n\031ENTRYTYPECOMPATIBLEPROTO2"
      "\020\000\022\024\n\020TRANSACTIONBEGIN\020\001\022\013\n\007ROWDATA\020\002\022\022\n"
      "\016TRANSACTIONEND\020\003\022\r\n\tHEARTBEAT\020\004\022\013\n\007GTID"
      "LOG\020\005*\345\001\n\tEventType\022\035\n\031EVENTTYPECOMPATIB"
      "LEPROTO2\020\000\022\n\n\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DE"
      "LETE\020\003\022\n\n\006CREATE\020\004\022\t\n\005ALTER\020\005\022\t\n\005ERASE\020\006"
      "\022\t\n\005QUERY\020\007\022\014\n\010TRUNCATE\020\010\022\n\n\006RENAME\020\t\022\n\n"
      "\006CINDEX\020\n\022\n\n\006DINDEX\020\013\022\010\n\004GTID\020\014\022\014\n\010XACOM"
      "MIT\020\r\022\016\n\nXAROLLBACK\020\016\022\016\n\nMHEARTBEAT\020\017*B\n"
      "\004Type\022\030\n\024TYPECOMPATIBLEPROTO2\020\000\022\n\n\006ORACL"
      "E\020\001\022\t\n\005MYSQL\020\002\022\t\n\005PGSQL\020\003B*\n\031com.woqutec"
      "h.binlog.entryB\013BinlogEntryH\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BinlogEntry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BinlogEntry_2eproto
namespace com {
namespace woqutech {
namespace binlog {
namespace entry {
const ::google::protobuf::EnumDescriptor* EntryType_descriptor() {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BinlogEntry_2eproto::file_level_enum_descriptors[0];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BinlogEntry_2eproto::file_level_enum_descriptors[1];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BinlogEntry_2eproto::file_level_enum_descriptors[2];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::com::woqutech::binlog::entry::_Entry_default_instance_._instance.get_mutable()->header_ = const_cast< ::com::woqutech::binlog::entry::Header*>(
      ::com::woqutech::binlog::entry::Header::internal_default_instance());
  ::com::woqutech::binlog::entry::_Entry_default_instance_.entrytype_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kHeaderFieldNumber;
const int Entry::kEntryTypeFieldNumber;
const int Entry::kStoreValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storevalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.storevalue().size() > 0) {
    storevalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storevalue_);
  }
  if (from.has_header()) {
    header_ = new ::com::woqutech::binlog::entry::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_entryType_present();
  switch (from.entryType_present_case()) {
    case kEntryType: {
      set_entrytype(from.entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.Entry)
}

void Entry::SharedCtor() {
  storevalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  clear_has_entryType_present();
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  storevalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (has_entryType_present()) {
    clear_entryType_present();
  }
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entry& Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_Entry.base);
  return *internal_default_instance();
}


void Entry::clear_entryType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.Entry)
  switch (entryType_present_case()) {
    case kEntryType: {
      // No need to clear
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRYTYPE_PRESENT_NOT_SET;
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_entryType_present();
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.woqutech.binlog.entry.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.entry.EntryType entryType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entrytype(static_cast< ::com::woqutech::binlog::entry::EntryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes storeValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_storevalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.woqutech.binlog.entry.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .com.woqutech.binlog.entry.EntryType entryType = 2;
  if (has_entrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->entrytype(), output);
  }

  // bytes storeValue = 3;
  if (this->storevalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->storevalue(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.woqutech.binlog.entry.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .com.woqutech.binlog.entry.EntryType entryType = 2;
  if (has_entrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->entrytype(), target);
  }

  // bytes storeValue = 3;
  if (this->storevalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->storevalue(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.Entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes storeValue = 3;
  if (this->storevalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->storevalue());
  }

  // .com.woqutech.binlog.entry.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (entryType_present_case()) {
    // .com.woqutech.binlog.entry.EntryType entryType = 2;
    case kEntryType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storevalue().size() > 0) {

    storevalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storevalue_);
  }
  if (from.has_header()) {
    mutable_header()->::com::woqutech::binlog::entry::Header::MergeFrom(from.header());
  }
  switch (from.entryType_present_case()) {
    case kEntryType: {
      set_entrytype(from.entrytype());
      break;
    }
    case ENTRYTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  storevalue_.Swap(&other->storevalue_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(entryType_present_, other->entryType_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::com::woqutech::binlog::entry::_Header_default_instance_.version_ = 0;
  ::com::woqutech::binlog::entry::_Header_default_instance_.sourcetype_ = 0;
  ::com::woqutech::binlog::entry::_Header_default_instance_.eventtype_ = 0;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kLogfileNameFieldNumber;
const int Header::kLogfileOffsetFieldNumber;
const int Header::kServerIdFieldNumber;
const int Header::kServerenCodeFieldNumber;
const int Header::kExecuteTimeFieldNumber;
const int Header::kSourceTypeFieldNumber;
const int Header::kSchemaNameFieldNumber;
const int Header::kTableNameFieldNumber;
const int Header::kEventLengthFieldNumber;
const int Header::kEventTypeFieldNumber;
const int Header::kPropsFieldNumber;
const int Header::kGtidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logfilename().size() > 0) {
    logfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logfilename_);
  }
  serverencode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serverencode().size() > 0) {
    serverencode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverencode_);
  }
  schemaname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schemaname().size() > 0) {
    schemaname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schemaname_);
  }
  tablename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tablename().size() > 0) {
    tablename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablename_);
  }
  gtid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gtid().size() > 0) {
    gtid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtid_);
  }
  ::memcpy(&logfileoffset_, &from.logfileoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventlength_) -
    reinterpret_cast<char*>(&logfileoffset_)) + sizeof(eventlength_));
  clear_has_version_present();
  switch (from.version_present_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_sourceType_present();
  switch (from.sourceType_present_case()) {
    case kSourceType: {
      set_sourcetype(from.sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_eventType_present();
  switch (from.eventType_present_case()) {
    case kEventType: {
      set_eventtype(from.eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.Header)
}

void Header::SharedCtor() {
  logfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverencode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schemaname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logfileoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventlength_) -
      reinterpret_cast<char*>(&logfileoffset_)) + sizeof(eventlength_));
  clear_has_version_present();
  clear_has_sourceType_present();
  clear_has_eventType_present();
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  logfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverencode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schemaname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_version_present()) {
    clear_version_present();
  }
  if (has_sourceType_present()) {
    clear_sourceType_present();
  }
  if (has_eventType_present()) {
    clear_eventType_present();
  }
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::clear_version_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.Header)
  switch (version_present_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VERSION_PRESENT_NOT_SET;
}

void Header::clear_sourceType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.Header)
  switch (sourceType_present_case()) {
    case kSourceType: {
      // No need to clear
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SOURCETYPE_PRESENT_NOT_SET;
}

void Header::clear_eventType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.Header)
  switch (eventType_present_case()) {
    case kEventType: {
      // No need to clear
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = EVENTTYPE_PRESENT_NOT_SET;
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  logfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverencode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schemaname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gtid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logfileoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventlength_) -
      reinterpret_cast<char*>(&logfileoffset_)) + sizeof(eventlength_));
  clear_version_present();
  clear_sourceType_present();
  clear_eventType_present();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_version_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_present_.version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logfileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logfilename().data(), static_cast<int>(this->logfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Header.logfileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logfileOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logfileoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 serverId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverenCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverencode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverencode().data(), static_cast<int>(this->serverencode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Header.serverenCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 executeTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.entry.Type sourceType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sourcetype(static_cast< ::com::woqutech::binlog::entry::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string schemaName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schemaname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schemaname().data(), static_cast<int>(this->schemaname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Header.schemaName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tableName = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tablename().data(), static_cast<int>(this->tablename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Header.tableName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 eventLength = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eventlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.entry.EventType eventType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eventtype(static_cast< ::com::woqutech::binlog::entry::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gtid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gtid().data(), static_cast<int>(this->gtid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Header.gtid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // string logfileName = 2;
  if (this->logfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logfilename().data(), static_cast<int>(this->logfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.logfileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logfilename(), output);
  }

  // int64 logfileOffset = 3;
  if (this->logfileoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->logfileoffset(), output);
  }

  // int64 serverId = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->serverid(), output);
  }

  // string serverenCode = 5;
  if (this->serverencode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverencode().data(), static_cast<int>(this->serverencode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.serverenCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverencode(), output);
  }

  // int64 executeTime = 6;
  if (this->executetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->executetime(), output);
  }

  // .com.woqutech.binlog.entry.Type sourceType = 7;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sourcetype(), output);
  }

  // string schemaName = 8;
  if (this->schemaname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schemaname().data(), static_cast<int>(this->schemaname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.schemaName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->schemaname(), output);
  }

  // string tableName = 9;
  if (this->tablename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tablename().data(), static_cast<int>(this->tablename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.tableName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tablename(), output);
  }

  // int64 eventLength = 10;
  if (this->eventlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->eventlength(), output);
  }

  // .com.woqutech.binlog.entry.EventType eventType = 11;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->eventtype(), output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->props(static_cast<int>(i)),
      output);
  }

  // string gtid = 13;
  if (this->gtid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtid().data(), static_cast<int>(this->gtid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.gtid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->gtid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // string logfileName = 2;
  if (this->logfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logfilename().data(), static_cast<int>(this->logfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.logfileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logfilename(), target);
  }

  // int64 logfileOffset = 3;
  if (this->logfileoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->logfileoffset(), target);
  }

  // int64 serverId = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->serverid(), target);
  }

  // string serverenCode = 5;
  if (this->serverencode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverencode().data(), static_cast<int>(this->serverencode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.serverenCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverencode(), target);
  }

  // int64 executeTime = 6;
  if (this->executetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->executetime(), target);
  }

  // .com.woqutech.binlog.entry.Type sourceType = 7;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sourcetype(), target);
  }

  // string schemaName = 8;
  if (this->schemaname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schemaname().data(), static_cast<int>(this->schemaname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.schemaName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->schemaname(), target);
  }

  // string tableName = 9;
  if (this->tablename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tablename().data(), static_cast<int>(this->tablename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.tableName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tablename(), target);
  }

  // int64 eventLength = 10;
  if (this->eventlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->eventlength(), target);
  }

  // .com.woqutech.binlog.entry.EventType eventType = 11;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->eventtype(), target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->props(static_cast<int>(i)), deterministic, target);
  }

  // string gtid = 13;
  if (this->gtid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gtid().data(), static_cast<int>(this->gtid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Header.gtid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->gtid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.Pair props = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string logfileName = 2;
  if (this->logfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logfilename());
  }

  // string serverenCode = 5;
  if (this->serverencode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverencode());
  }

  // string schemaName = 8;
  if (this->schemaname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schemaname());
  }

  // string tableName = 9;
  if (this->tablename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tablename());
  }

  // string gtid = 13;
  if (this->gtid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gtid());
  }

  // int64 logfileOffset = 3;
  if (this->logfileoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logfileoffset());
  }

  // int64 serverId = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serverid());
  }

  // int64 executeTime = 6;
  if (this->executetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->executetime());
  }

  // int64 eventLength = 10;
  if (this->eventlength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->eventlength());
  }

  switch (version_present_case()) {
    // int32 version = 1;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (sourceType_present_case()) {
    // .com.woqutech.binlog.entry.Type sourceType = 7;
    case kSourceType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (eventType_present_case()) {
    // .com.woqutech.binlog.entry.EventType eventType = 11;
    case kEventType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.logfilename().size() > 0) {

    logfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logfilename_);
  }
  if (from.serverencode().size() > 0) {

    serverencode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverencode_);
  }
  if (from.schemaname().size() > 0) {

    schemaname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schemaname_);
  }
  if (from.tablename().size() > 0) {

    tablename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tablename_);
  }
  if (from.gtid().size() > 0) {

    gtid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gtid_);
  }
  if (from.logfileoffset() != 0) {
    set_logfileoffset(from.logfileoffset());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.executetime() != 0) {
    set_executetime(from.executetime());
  }
  if (from.eventlength() != 0) {
    set_eventlength(from.eventlength());
  }
  switch (from.version_present_case()) {
    case kVersion: {
      set_version(from.version());
      break;
    }
    case VERSION_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.sourceType_present_case()) {
    case kSourceType: {
      set_sourcetype(from.sourcetype());
      break;
    }
    case SOURCETYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.eventType_present_case()) {
    case kEventType: {
      set_eventtype(from.eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  logfilename_.Swap(&other->logfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serverencode_.Swap(&other->serverencode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schemaname_.Swap(&other->schemaname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tablename_.Swap(&other->tablename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gtid_.Swap(&other->gtid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logfileoffset_, other->logfileoffset_);
  swap(serverid_, other->serverid_);
  swap(executetime_, other->executetime_);
  swap(eventlength_, other->eventlength_);
  swap(version_present_, other->version_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(sourceType_present_, other->sourceType_present_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(eventType_present_, other->eventType_present_);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Column::InitAsDefaultInstance() {
  ::com::woqutech::binlog::entry::_Column_default_instance_.isnull_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Column::kIndexFieldNumber;
const int Column::kSqlTypeFieldNumber;
const int Column::kNameFieldNumber;
const int Column::kIsKeyFieldNumber;
const int Column::kUpdatedFieldNumber;
const int Column::kIsNullFieldNumber;
const int Column::kPropsFieldNumber;
const int Column::kValueFieldNumber;
const int Column::kLengthFieldNumber;
const int Column::kMysqlTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Column::Column()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_Column.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.Column)
}
Column::Column(const Column& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  mysqltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mysqltype().size() > 0) {
    mysqltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysqltype_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&index_)) + sizeof(length_));
  clear_has_isNull_present();
  switch (from.isNull_present_case()) {
    case kIsNull: {
      set_isnull(from.isnull());
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.Column)
}

void Column::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysqltype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&index_)) + sizeof(length_));
  clear_has_isNull_present();
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysqltype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_isNull_present()) {
    clear_isNull_present();
  }
}

void Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Column& Column::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_Column.base);
  return *internal_default_instance();
}


void Column::clear_isNull_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.Column)
  switch (isNull_present_case()) {
    case kIsNull: {
      // No need to clear
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ISNULL_PRESENT_NOT_SET;
}


void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysqltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&index_)) + sizeof(length_));
  clear_isNull_present();
  _internal_metadata_.Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.Column)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sqlType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Column.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool updated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isNull = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_isNull_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isNull_present_.isnull_)));
          set_has_isnull();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Column.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mysqlType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqltype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mysqltype().data(), static_cast<int>(this->mysqltype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Column.mysqlType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // int32 sqlType = 2;
  if (this->sqltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sqltype(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool isKey = 4;
  if (this->iskey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iskey(), output);
  }

  // bool updated = 5;
  if (this->updated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->updated(), output);
  }

  // bool isNull = 6;
  if (has_isnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnull(), output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->props(static_cast<int>(i)),
      output);
  }

  // string value = 8;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->value(), output);
  }

  // int32 length = 9;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->length(), output);
  }

  // string mysqlType = 10;
  if (this->mysqltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mysqltype().data(), static_cast<int>(this->mysqltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.mysqlType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mysqltype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.Column)
}

::google::protobuf::uint8* Column::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // int32 sqlType = 2;
  if (this->sqltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sqltype(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool isKey = 4;
  if (this->iskey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iskey(), target);
  }

  // bool updated = 5;
  if (this->updated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->updated(), target);
  }

  // bool isNull = 6;
  if (has_isnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnull(), target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->props(static_cast<int>(i)), deterministic, target);
  }

  // string value = 8;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->value(), target);
  }

  // int32 length = 9;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->length(), target);
  }

  // string mysqlType = 10;
  if (this->mysqltype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mysqltype().data(), static_cast<int>(this->mysqltype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Column.mysqlType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mysqltype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.Column)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.Pair props = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 8;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string mysqlType = 10;
  if (this->mysqltype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mysqltype());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 sqlType = 2;
  if (this->sqltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sqltype());
  }

  // bool isKey = 4;
  if (this->iskey() != 0) {
    total_size += 1 + 1;
  }

  // bool updated = 5;
  if (this->updated() != 0) {
    total_size += 1 + 1;
  }

  // int32 length = 9;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  switch (isNull_present_case()) {
    // bool isNull = 6;
    case kIsNull: {
      total_size += 1 + 1;
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const Column* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Column>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.Column)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.Column)
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.mysqltype().size() > 0) {

    mysqltype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mysqltype_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.sqltype() != 0) {
    set_sqltype(from.sqltype());
  }
  if (from.iskey() != 0) {
    set_iskey(from.iskey());
  }
  if (from.updated() != 0) {
    set_updated(from.updated());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  switch (from.isNull_present_case()) {
    case kIsNull: {
      set_isnull(from.isnull());
      break;
    }
    case ISNULL_PRESENT_NOT_SET: {
      break;
    }
  }
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::Swap(Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Column::InternalSwap(Column* other) {
  using std::swap;
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mysqltype_.Swap(&other->mysqltype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(sqltype_, other->sqltype_);
  swap(iskey_, other->iskey_);
  swap(updated_, other->updated_);
  swap(length_, other->length_);
  swap(isNull_present_, other->isNull_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RowData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowData::kBeforeColumnsFieldNumber;
const int RowData::kAfterColumnsFieldNumber;
const int RowData::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowData::RowData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_RowData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.RowData)
}
RowData::RowData(const RowData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      beforecolumns_(from.beforecolumns_),
      aftercolumns_(from.aftercolumns_),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.RowData)
}

void RowData::SharedCtor() {
}

RowData::~RowData() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.RowData)
  SharedDtor();
}

void RowData::SharedDtor() {
}

void RowData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RowData::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowData& RowData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_RowData.base);
  return *internal_default_instance();
}


void RowData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.RowData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beforecolumns_.Clear();
  aftercolumns_.Clear();
  props_.Clear();
  _internal_metadata_.Clear();
}

bool RowData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.RowData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.woqutech.binlog.entry.Column beforeColumns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_beforecolumns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Column afterColumns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aftercolumns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.RowData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.RowData)
  return false;
#undef DO_
}

void RowData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.RowData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.woqutech.binlog.entry.Column beforeColumns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->beforecolumns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->beforecolumns(static_cast<int>(i)),
      output);
  }

  // repeated .com.woqutech.binlog.entry.Column afterColumns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aftercolumns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->aftercolumns(static_cast<int>(i)),
      output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->props(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.RowData)
}

::google::protobuf::uint8* RowData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.RowData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.woqutech.binlog.entry.Column beforeColumns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->beforecolumns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->beforecolumns(static_cast<int>(i)), deterministic, target);
  }

  // repeated .com.woqutech.binlog.entry.Column afterColumns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aftercolumns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->aftercolumns(static_cast<int>(i)), deterministic, target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->props(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.RowData)
  return target;
}

size_t RowData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.RowData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.Column beforeColumns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->beforecolumns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->beforecolumns(static_cast<int>(i)));
    }
  }

  // repeated .com.woqutech.binlog.entry.Column afterColumns = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->aftercolumns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aftercolumns(static_cast<int>(i)));
    }
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.RowData)
  GOOGLE_DCHECK_NE(&from, this);
  const RowData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.RowData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.RowData)
    MergeFrom(*source);
  }
}

void RowData::MergeFrom(const RowData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.RowData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  beforecolumns_.MergeFrom(from.beforecolumns_);
  aftercolumns_.MergeFrom(from.aftercolumns_);
  props_.MergeFrom(from.props_);
}

void RowData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.RowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowData::CopyFrom(const RowData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.RowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowData::IsInitialized() const {
  return true;
}

void RowData::Swap(RowData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowData::InternalSwap(RowData* other) {
  using std::swap;
  CastToBase(&beforecolumns_)->InternalSwap(CastToBase(&other->beforecolumns_));
  CastToBase(&aftercolumns_)->InternalSwap(CastToBase(&other->aftercolumns_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RowData::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RowChange::InitAsDefaultInstance() {
  ::com::woqutech::binlog::entry::_RowChange_default_instance_.eventtype_ = 0;
  ::com::woqutech::binlog::entry::_RowChange_default_instance_.isddl_ = false;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RowChange::kTableIdFieldNumber;
const int RowChange::kEventTypeFieldNumber;
const int RowChange::kIsDdlFieldNumber;
const int RowChange::kSqlFieldNumber;
const int RowChange::kRowDatasFieldNumber;
const int RowChange::kPropsFieldNumber;
const int RowChange::kDdlSchemaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RowChange::RowChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_RowChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.RowChange)
}
RowChange::RowChange(const RowChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rowdatas_(from.rowdatas_),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  ddlschemaname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ddlschemaname().size() > 0) {
    ddlschemaname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ddlschemaname_);
  }
  tableid_ = from.tableid_;
  clear_has_eventType_present();
  switch (from.eventType_present_case()) {
    case kEventType: {
      set_eventtype(from.eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  clear_has_isDdl_present();
  switch (from.isDdl_present_case()) {
    case kIsDdl: {
      set_isddl(from.isddl());
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.RowChange)
}

void RowChange::SharedCtor() {
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ddlschemaname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = GOOGLE_LONGLONG(0);
  clear_has_eventType_present();
  clear_has_isDdl_present();
}

RowChange::~RowChange() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.RowChange)
  SharedDtor();
}

void RowChange::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ddlschemaname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_eventType_present()) {
    clear_eventType_present();
  }
  if (has_isDdl_present()) {
    clear_isDdl_present();
  }
}

void RowChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RowChange::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RowChange& RowChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_RowChange.base);
  return *internal_default_instance();
}


void RowChange::clear_eventType_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.RowChange)
  switch (eventType_present_case()) {
    case kEventType: {
      // No need to clear
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENTTYPE_PRESENT_NOT_SET;
}

void RowChange::clear_isDdl_present() {
// @@protoc_insertion_point(one_of_clear_start:com.woqutech.binlog.entry.RowChange)
  switch (isDdl_present_case()) {
    case kIsDdl: {
      // No need to clear
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ISDDL_PRESENT_NOT_SET;
}


void RowChange::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.RowChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rowdatas_.Clear();
  props_.Clear();
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ddlschemaname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = GOOGLE_LONGLONG(0);
  clear_eventType_present();
  clear_isDdl_present();
  _internal_metadata_.Clear();
}

bool RowChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.RowChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 tableId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.woqutech.binlog.entry.EventType eventType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eventtype(static_cast< ::com::woqutech::binlog::entry::EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDdl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          clear_isDdl_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isDdl_present_.isddl_)));
          set_has_isddl();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.RowChange.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.RowData rowDatas = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rowdatas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ddlSchemaName = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ddlschemaname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ddlschemaname().data(), static_cast<int>(this->ddlschemaname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.RowChange.ddlSchemaName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.RowChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.RowChange)
  return false;
#undef DO_
}

void RowChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.RowChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tableid(), output);
  }

  // .com.woqutech.binlog.entry.EventType eventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // bool isDdl = 10;
  if (has_isddl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isddl(), output);
  }

  // string sql = 11;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.RowChange.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sql(), output);
  }

  // repeated .com.woqutech.binlog.entry.RowData rowDatas = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rowdatas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->rowdatas(static_cast<int>(i)),
      output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->props(static_cast<int>(i)),
      output);
  }

  // string ddlSchemaName = 14;
  if (this->ddlschemaname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ddlschemaname().data(), static_cast<int>(this->ddlschemaname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.RowChange.ddlSchemaName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ddlschemaname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.RowChange)
}

::google::protobuf::uint8* RowChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.RowChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tableid(), target);
  }

  // .com.woqutech.binlog.entry.EventType eventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // bool isDdl = 10;
  if (has_isddl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isddl(), target);
  }

  // string sql = 11;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.RowChange.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sql(), target);
  }

  // repeated .com.woqutech.binlog.entry.RowData rowDatas = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rowdatas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->rowdatas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->props(static_cast<int>(i)), deterministic, target);
  }

  // string ddlSchemaName = 14;
  if (this->ddlschemaname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ddlschemaname().data(), static_cast<int>(this->ddlschemaname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.RowChange.ddlSchemaName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ddlschemaname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.RowChange)
  return target;
}

size_t RowChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.RowChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.RowData rowDatas = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->rowdatas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rowdatas(static_cast<int>(i)));
    }
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string sql = 11;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // string ddlSchemaName = 14;
  if (this->ddlschemaname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ddlschemaname());
  }

  // int64 tableId = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tableid());
  }

  switch (eventType_present_case()) {
    // .com.woqutech.binlog.entry.EventType eventType = 2;
    case kEventType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (isDdl_present_case()) {
    // bool isDdl = 10;
    case kIsDdl: {
      total_size += 1 + 1;
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.RowChange)
  GOOGLE_DCHECK_NE(&from, this);
  const RowChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RowChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.RowChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.RowChange)
    MergeFrom(*source);
  }
}

void RowChange::MergeFrom(const RowChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.RowChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rowdatas_.MergeFrom(from.rowdatas_);
  props_.MergeFrom(from.props_);
  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.ddlschemaname().size() > 0) {

    ddlschemaname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ddlschemaname_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  switch (from.eventType_present_case()) {
    case kEventType: {
      set_eventtype(from.eventtype());
      break;
    }
    case EVENTTYPE_PRESENT_NOT_SET: {
      break;
    }
  }
  switch (from.isDdl_present_case()) {
    case kIsDdl: {
      set_isddl(from.isddl());
      break;
    }
    case ISDDL_PRESENT_NOT_SET: {
      break;
    }
  }
}

void RowChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.RowChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowChange::CopyFrom(const RowChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.RowChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowChange::IsInitialized() const {
  return true;
}

void RowChange::Swap(RowChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RowChange::InternalSwap(RowChange* other) {
  using std::swap;
  CastToBase(&rowdatas_)->InternalSwap(CastToBase(&other->rowdatas_));
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ddlschemaname_.Swap(&other->ddlschemaname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tableid_, other->tableid_);
  swap(eventType_present_, other->eventType_present_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(isDdl_present_, other->isDdl_present_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RowChange::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransactionBegin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionBegin::kExecuteTimeFieldNumber;
const int TransactionBegin::kTransactionIdFieldNumber;
const int TransactionBegin::kPropsFieldNumber;
const int TransactionBegin::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionBegin::TransactionBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_TransactionBegin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.TransactionBegin)
}
TransactionBegin::TransactionBegin(const TransactionBegin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transactionid().size() > 0) {
    transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  ::memcpy(&executetime_, &from.executetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&threadid_) -
    reinterpret_cast<char*>(&executetime_)) + sizeof(threadid_));
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.TransactionBegin)
}

void TransactionBegin::SharedCtor() {
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&executetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threadid_) -
      reinterpret_cast<char*>(&executetime_)) + sizeof(threadid_));
}

TransactionBegin::~TransactionBegin() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.TransactionBegin)
  SharedDtor();
}

void TransactionBegin::SharedDtor() {
  transactionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransactionBegin::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionBegin& TransactionBegin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_TransactionBegin.base);
  return *internal_default_instance();
}


void TransactionBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.TransactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  transactionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&executetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threadid_) -
      reinterpret_cast<char*>(&executetime_)) + sizeof(threadid_));
  _internal_metadata_.Clear();
}

bool TransactionBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.TransactionBegin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 executeTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transactionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transactionid().data(), static_cast<int>(this->transactionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.TransactionBegin.transactionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 threadId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threadid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.TransactionBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.TransactionBegin)
  return false;
#undef DO_
}

void TransactionBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.TransactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->executetime(), output);
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.TransactionBegin.transactionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transactionid(), output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->props(static_cast<int>(i)),
      output);
  }

  // int64 threadId = 4;
  if (this->threadid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->threadid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.TransactionBegin)
}

::google::protobuf::uint8* TransactionBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.TransactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->executetime(), target);
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.TransactionBegin.transactionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->props(static_cast<int>(i)), deterministic, target);
  }

  // int64 threadId = 4;
  if (this->threadid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->threadid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.TransactionBegin)
  return target;
}

size_t TransactionBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.TransactionBegin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transactionid());
  }

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->executetime());
  }

  // int64 threadId = 4;
  if (this->threadid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->threadid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.TransactionBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionBegin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.TransactionBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.TransactionBegin)
    MergeFrom(*source);
  }
}

void TransactionBegin::MergeFrom(const TransactionBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.TransactionBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.transactionid().size() > 0) {

    transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  if (from.executetime() != 0) {
    set_executetime(from.executetime());
  }
  if (from.threadid() != 0) {
    set_threadid(from.threadid());
  }
}

void TransactionBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.TransactionBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionBegin::CopyFrom(const TransactionBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.TransactionBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBegin::IsInitialized() const {
  return true;
}

void TransactionBegin::Swap(TransactionBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionBegin::InternalSwap(TransactionBegin* other) {
  using std::swap;
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  transactionid_.Swap(&other->transactionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(executetime_, other->executetime_);
  swap(threadid_, other->threadid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransactionBegin::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransactionEnd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionEnd::kExecuteTimeFieldNumber;
const int TransactionEnd::kTransactionIdFieldNumber;
const int TransactionEnd::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionEnd::TransactionEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_TransactionEnd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.TransactionEnd)
}
TransactionEnd::TransactionEnd(const TransactionEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transactionid().size() > 0) {
    transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  executetime_ = from.executetime_;
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.TransactionEnd)
}

void TransactionEnd::SharedCtor() {
  transactionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executetime_ = GOOGLE_LONGLONG(0);
}

TransactionEnd::~TransactionEnd() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.TransactionEnd)
  SharedDtor();
}

void TransactionEnd::SharedDtor() {
  transactionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransactionEnd::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionEnd& TransactionEnd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_TransactionEnd.base);
  return *internal_default_instance();
}


void TransactionEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.TransactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  transactionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executetime_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TransactionEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.TransactionEnd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 executeTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &executetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transactionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transactionid().data(), static_cast<int>(this->transactionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.TransactionEnd.transactionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.woqutech.binlog.entry.Pair props = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.TransactionEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.TransactionEnd)
  return false;
#undef DO_
}

void TransactionEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.TransactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->executetime(), output);
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.TransactionEnd.transactionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transactionid(), output);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->props(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.TransactionEnd)
}

::google::protobuf::uint8* TransactionEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.TransactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->executetime(), target);
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transactionid().data(), static_cast<int>(this->transactionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.TransactionEnd.transactionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }

  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->props(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.TransactionEnd)
  return target;
}

size_t TransactionEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.TransactionEnd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.woqutech.binlog.entry.Pair props = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  // string transactionId = 2;
  if (this->transactionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transactionid());
  }

  // int64 executeTime = 1;
  if (this->executetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->executetime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.TransactionEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.TransactionEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.TransactionEnd)
    MergeFrom(*source);
  }
}

void TransactionEnd::MergeFrom(const TransactionEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.TransactionEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (from.transactionid().size() > 0) {

    transactionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transactionid_);
  }
  if (from.executetime() != 0) {
    set_executetime(from.executetime());
  }
}

void TransactionEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.TransactionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionEnd::CopyFrom(const TransactionEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.TransactionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEnd::IsInitialized() const {
  return true;
}

void TransactionEnd::Swap(TransactionEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionEnd::InternalSwap(TransactionEnd* other) {
  using std::swap;
  CastToBase(&props_)->InternalSwap(CastToBase(&other->props_));
  transactionid_.Swap(&other->transactionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(executetime_, other->executetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransactionEnd::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pair::Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BinlogEntry_2eproto::scc_info_Pair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.woqutech.binlog.entry.Pair)
}
Pair::Pair(const Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:com.woqutech.binlog.entry.Pair)
}

void Pair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:com.woqutech.binlog.entry.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  ::protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pair& Pair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BinlogEntry_2eproto::scc_info_Pair.base);
  return *internal_default_instance();
}


void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.woqutech.binlog.entry.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.woqutech.binlog.entry.Pair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Pair.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.woqutech.binlog.entry.Pair.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.woqutech.binlog.entry.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.woqutech.binlog.entry.Pair)
  return false;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.woqutech.binlog.entry.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Pair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Pair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.woqutech.binlog.entry.Pair)
}

::google::protobuf::uint8* Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.woqutech.binlog.entry.Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Pair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.woqutech.binlog.entry.Pair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.woqutech.binlog.entry.Pair)
  return target;
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.woqutech.binlog.entry.Pair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.woqutech.binlog.entry.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.woqutech.binlog.entry.Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.woqutech.binlog.entry.Pair)
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.woqutech.binlog.entry.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.woqutech.binlog.entry.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.woqutech.binlog.entry.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::Swap(Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pair::InternalSwap(Pair* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_BinlogEntry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BinlogEntry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace entry
}  // namespace binlog
}  // namespace woqutech
}  // namespace com
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::Entry* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::Header* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::Header >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::Column* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::Column >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::Column >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::RowData* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::RowData >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::RowData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::RowChange* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::RowChange >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::RowChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::TransactionBegin* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::TransactionBegin >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::TransactionBegin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::TransactionEnd* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::TransactionEnd >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::TransactionEnd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::woqutech::binlog::entry::Pair* Arena::CreateMaybeMessage< ::com::woqutech::binlog::entry::Pair >(Arena* arena) {
  return Arena::CreateInternal< ::com::woqutech::binlog::entry::Pair >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
